ARM GAS  /tmp/ccEAF6Un.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_hal_can.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  21              		.align	2
  22              		.weak	HAL_CAN_MspInit
  23              		.thumb
  24              		.thumb_func
  26              	HAL_CAN_MspInit:
  27              	.LFB125:
  28              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @file    stm32f4xx_hal_can.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
ARM GAS  /tmp/ccEAF6Un.s 			page 2


  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           functions:
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           messages.
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           can be used:
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==============================
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ================================
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
ARM GAS  /tmp/ccEAF6Un.s 			page 3


  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           here.
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==================
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           be completed.
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @attention
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      without specific prior written permission.
ARM GAS  /tmp/ccEAF6Un.s 			page 4


 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #include "stm32f4xx_hal.h"
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @addtogroup STM32F4xx_HAL_Driver
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN1)
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
ARM GAS  /tmp/ccEAF6Un.s 			page 5


 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
ARM GAS  /tmp/ccEAF6Un.s 			page 6


 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
ARM GAS  /tmp/ccEAF6Un.s 			page 7


 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
ARM GAS  /tmp/ccEAF6Un.s 			page 8


 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         reset values.
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_Stop(hcan);
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
  29              		.loc 1 415 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE125:
  39 0002 00BF     		.section	.text.HAL_CAN_Init,"ax",%progbits
  40              		.align	2
  41              		.global	HAL_CAN_Init
  42              		.thumb
  43              		.thumb_func
ARM GAS  /tmp/ccEAF6Un.s 			page 9


  45              	HAL_CAN_Init:
  46              	.LFB123:
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  47              		.loc 1 223 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  52              		.loc 1 227 0
  53 0000 0028     		cmp	r0, #0
  54 0002 00F0A480 		beq	.L21
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  55              		.loc 1 223 0
  56 0006 38B5     		push	{r3, r4, r5, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 3, -16
  60              		.cfi_offset 4, -12
  61              		.cfi_offset 5, -8
  62              		.cfi_offset 14, -4
  63 0008 0446     		mov	r4, r0
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  64              		.loc 1 246 0
  65 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  66 000e 13F0FF0F 		tst	r3, #255
  67 0012 01D1     		bne	.L4
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
  68              		.loc 1 249 0
  69 0014 FFF7FEFF 		bl	HAL_CAN_MspInit
  70              	.LVL2:
  71              	.L4:
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  72              		.loc 1 253 0
  73 0018 2268     		ldr	r2, [r4]
  74 001a 1368     		ldr	r3, [r2]
  75 001c 23F00203 		bic	r3, r3, #2
  76 0020 1360     		str	r3, [r2]
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  77              		.loc 1 256 0
  78 0022 FFF7FEFF 		bl	HAL_GetTick
  79              	.LVL3:
  80 0026 0546     		mov	r5, r0
  81              	.LVL4:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  82              		.loc 1 259 0
  83 0028 0DE0     		b	.L5
  84              	.LVL5:
  85              	.L6:
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
  86              		.loc 1 261 0
  87 002a FFF7FEFF 		bl	HAL_GetTick
  88              	.LVL6:
  89 002e 401B     		subs	r0, r0, r5
  90 0030 0A28     		cmp	r0, #10
  91 0032 08D9     		bls	.L5
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEAF6Un.s 			page 10


  92              		.loc 1 264 0
  93 0034 636A     		ldr	r3, [r4, #36]
  94 0036 43F40033 		orr	r3, r3, #131072
  95 003a 6362     		str	r3, [r4, #36]
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  96              		.loc 1 267 0
  97 003c 0523     		movs	r3, #5
  98 003e 84F82030 		strb	r3, [r4, #32]
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
  99              		.loc 1 269 0
 100 0042 0120     		movs	r0, #1
 101 0044 38BD     		pop	{r3, r4, r5, pc}
 102              	.LVL7:
 103              	.L5:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 104              		.loc 1 259 0
 105 0046 2368     		ldr	r3, [r4]
 106 0048 5A68     		ldr	r2, [r3, #4]
 107 004a 12F0020F 		tst	r2, #2
 108 004e ECD1     		bne	.L6
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 109              		.loc 1 274 0
 110 0050 1A68     		ldr	r2, [r3]
 111 0052 42F00102 		orr	r2, r2, #1
 112 0056 1A60     		str	r2, [r3]
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113              		.loc 1 277 0
 114 0058 FFF7FEFF 		bl	HAL_GetTick
 115              	.LVL8:
 116 005c 0546     		mov	r5, r0
 117              	.LVL9:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 118              		.loc 1 280 0
 119 005e 0DE0     		b	.L7
 120              	.LVL10:
 121              	.L8:
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 122              		.loc 1 282 0
 123 0060 FFF7FEFF 		bl	HAL_GetTick
 124              	.LVL11:
 125 0064 401B     		subs	r0, r0, r5
 126 0066 0A28     		cmp	r0, #10
 127 0068 08D9     		bls	.L7
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 128              		.loc 1 285 0
 129 006a 636A     		ldr	r3, [r4, #36]
 130 006c 43F40033 		orr	r3, r3, #131072
 131 0070 6362     		str	r3, [r4, #36]
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 132              		.loc 1 288 0
 133 0072 0523     		movs	r3, #5
 134 0074 84F82030 		strb	r3, [r4, #32]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 135              		.loc 1 290 0
 136 0078 0120     		movs	r0, #1
 137 007a 38BD     		pop	{r3, r4, r5, pc}
 138              	.LVL12:
ARM GAS  /tmp/ccEAF6Un.s 			page 11


 139              	.L7:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 140              		.loc 1 280 0
 141 007c 2368     		ldr	r3, [r4]
 142 007e 5A68     		ldr	r2, [r3, #4]
 143 0080 12F0010F 		tst	r2, #1
 144 0084 ECD0     		beq	.L8
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 145              		.loc 1 295 0
 146 0086 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 147 0088 012A     		cmp	r2, #1
 148 008a 04D1     		bne	.L9
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 149              		.loc 1 297 0
 150 008c 1A68     		ldr	r2, [r3]
 151 008e 42F08002 		orr	r2, r2, #128
 152 0092 1A60     		str	r2, [r3]
 153 0094 03E0     		b	.L10
 154              	.L9:
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 155              		.loc 1 301 0
 156 0096 1A68     		ldr	r2, [r3]
 157 0098 22F08002 		bic	r2, r2, #128
 158 009c 1A60     		str	r2, [r3]
 159              	.L10:
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 160              		.loc 1 305 0
 161 009e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 162 00a0 012B     		cmp	r3, #1
 163 00a2 05D1     		bne	.L11
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 164              		.loc 1 307 0
 165 00a4 2268     		ldr	r2, [r4]
 166 00a6 1368     		ldr	r3, [r2]
 167 00a8 43F04003 		orr	r3, r3, #64
 168 00ac 1360     		str	r3, [r2]
 169 00ae 04E0     		b	.L12
 170              	.L11:
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 171              		.loc 1 311 0
 172 00b0 2268     		ldr	r2, [r4]
 173 00b2 1368     		ldr	r3, [r2]
 174 00b4 23F04003 		bic	r3, r3, #64
 175 00b8 1360     		str	r3, [r2]
 176              	.L12:
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 177              		.loc 1 315 0
 178 00ba A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 179 00bc 012B     		cmp	r3, #1
 180 00be 05D1     		bne	.L13
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 181              		.loc 1 317 0
 182 00c0 2268     		ldr	r2, [r4]
 183 00c2 1368     		ldr	r3, [r2]
 184 00c4 43F02003 		orr	r3, r3, #32
 185 00c8 1360     		str	r3, [r2]
 186 00ca 04E0     		b	.L14
ARM GAS  /tmp/ccEAF6Un.s 			page 12


 187              	.L13:
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 188              		.loc 1 321 0
 189 00cc 2268     		ldr	r2, [r4]
 190 00ce 1368     		ldr	r3, [r2]
 191 00d0 23F02003 		bic	r3, r3, #32
 192 00d4 1360     		str	r3, [r2]
 193              	.L14:
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 194              		.loc 1 325 0
 195 00d6 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 196 00d8 012B     		cmp	r3, #1
 197 00da 05D1     		bne	.L15
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 198              		.loc 1 327 0
 199 00dc 2268     		ldr	r2, [r4]
 200 00de 1368     		ldr	r3, [r2]
 201 00e0 23F01003 		bic	r3, r3, #16
 202 00e4 1360     		str	r3, [r2]
 203 00e6 04E0     		b	.L16
 204              	.L15:
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 205              		.loc 1 331 0
 206 00e8 2268     		ldr	r2, [r4]
 207 00ea 1368     		ldr	r3, [r2]
 208 00ec 43F01003 		orr	r3, r3, #16
 209 00f0 1360     		str	r3, [r2]
 210              	.L16:
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 211              		.loc 1 335 0
 212 00f2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 213 00f4 012B     		cmp	r3, #1
 214 00f6 05D1     		bne	.L17
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 215              		.loc 1 337 0
 216 00f8 2268     		ldr	r2, [r4]
 217 00fa 1368     		ldr	r3, [r2]
 218 00fc 43F00803 		orr	r3, r3, #8
 219 0100 1360     		str	r3, [r2]
 220 0102 04E0     		b	.L18
 221              	.L17:
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 222              		.loc 1 341 0
 223 0104 2268     		ldr	r2, [r4]
 224 0106 1368     		ldr	r3, [r2]
 225 0108 23F00803 		bic	r3, r3, #8
 226 010c 1360     		str	r3, [r2]
 227              	.L18:
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 228              		.loc 1 345 0
 229 010e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 230 0110 012B     		cmp	r3, #1
 231 0112 05D1     		bne	.L19
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 232              		.loc 1 347 0
 233 0114 2268     		ldr	r2, [r4]
 234 0116 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccEAF6Un.s 			page 13


 235 0118 43F00403 		orr	r3, r3, #4
 236 011c 1360     		str	r3, [r2]
 237 011e 04E0     		b	.L20
 238              	.L19:
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 239              		.loc 1 351 0
 240 0120 2268     		ldr	r2, [r4]
 241 0122 1368     		ldr	r3, [r2]
 242 0124 23F00403 		bic	r3, r3, #4
 243 0128 1360     		str	r3, [r2]
 244              	.L20:
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 245              		.loc 1 355 0
 246 012a 2168     		ldr	r1, [r4]
 247 012c A268     		ldr	r2, [r4, #8]
 248 012e E368     		ldr	r3, [r4, #12]
 249 0130 1A43     		orrs	r2, r2, r3
 250 0132 2369     		ldr	r3, [r4, #16]
 251 0134 1A43     		orrs	r2, r2, r3
 252 0136 6369     		ldr	r3, [r4, #20]
 253 0138 1A43     		orrs	r2, r2, r3
 254 013a 6368     		ldr	r3, [r4, #4]
 255 013c 013B     		subs	r3, r3, #1
 256 013e 1343     		orrs	r3, r3, r2
 257 0140 CB61     		str	r3, [r1, #28]
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 258              		.loc 1 362 0
 259 0142 0020     		movs	r0, #0
 260 0144 6062     		str	r0, [r4, #36]
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 261              		.loc 1 365 0
 262 0146 0123     		movs	r3, #1
 263 0148 84F82030 		strb	r3, [r4, #32]
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 264              		.loc 1 368 0
 265 014c 38BD     		pop	{r3, r4, r5, pc}
 266              	.LVL13:
 267              	.L21:
 268              	.LCFI1:
 269              		.cfi_def_cfa_offset 0
 270              		.cfi_restore 3
 271              		.cfi_restore 4
 272              		.cfi_restore 5
 273              		.cfi_restore 14
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 274              		.loc 1 229 0
 275 014e 0120     		movs	r0, #1
 276              	.LVL14:
 277 0150 7047     		bx	lr
 278              		.cfi_endproc
 279              	.LFE123:
 281 0152 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 282              		.align	2
 283              		.weak	HAL_CAN_MspDeInit
 284              		.thumb
 285              		.thumb_func
 287              	HAL_CAN_MspDeInit:
ARM GAS  /tmp/ccEAF6Un.s 			page 14


 288              	.LFB126:
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 289              		.loc 1 431 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294              	.LVL15:
 295 0000 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE126:
 299 0002 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 300              		.align	2
 301              		.global	HAL_CAN_ConfigFilter
 302              		.thumb
 303              		.thumb_func
 305              	HAL_CAN_ConfigFilter:
 306              	.LFB127:
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
ARM GAS  /tmp/ccEAF6Un.s 			page 15


 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 307              		.loc 1 469 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL16:
 313              		.loc 1 469 0
 314 0000 70B4     		push	{r4, r5, r6}
 315              	.LCFI2:
 316              		.cfi_def_cfa_offset 12
 317              		.cfi_offset 4, -12
 318              		.cfi_offset 5, -8
 319              		.cfi_offset 6, -4
 320              	.LVL17:
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos = 0U;
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 321              		.loc 1 473 0
 322 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 323 0006 DBB2     		uxtb	r3, r3
 324 0008 012B     		cmp	r3, #1
 325 000a 04D0     		beq	.L26
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 326              		.loc 1 474 0 discriminator 1
 327 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 328 0010 DBB2     		uxtb	r3, r3
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 329              		.loc 1 473 0 discriminator 1
 330 0012 022B     		cmp	r3, #2
 331 0014 7FD1     		bne	.L27
 332              	.L26:
 333              	.LVL18:
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
ARM GAS  /tmp/ccEAF6Un.s 			page 16


 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (hcan->Instance == CAN3)
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN3 is single instance with 14 dedicated filters banks */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select master instance to access the filter banks */
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip = CAN1;
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     can_ip = CAN1;
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Initialisation mode for the filter */
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 334              		.loc 1 521 0
 335 0016 434B     		ldr	r3, .L37
 336 0018 D3F80022 		ldr	r2, [r3, #512]
 337 001c 42F00102 		orr	r2, r2, #1
 338 0020 C3F80022 		str	r2, [r3, #512]
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (can_ip == CAN1)
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select the start filter number of CAN2 slave instance */
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 339              		.loc 1 534 0
 340 0024 D3F80022 		ldr	r2, [r3, #512]
ARM GAS  /tmp/ccEAF6Un.s 			page 17


 341 0028 22F47C52 		bic	r2, r2, #16128
 342 002c C3F80022 		str	r2, [r3, #512]
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 343              		.loc 1 535 0
 344 0030 D3F80022 		ldr	r2, [r3, #512]
 345 0034 486A     		ldr	r0, [r1, #36]
 346              	.LVL19:
 347 0036 42EA0022 		orr	r2, r2, r0, lsl #8
 348 003a C3F80022 		str	r2, [r3, #512]
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Convert filter number into bit position */
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 349              		.loc 1 539 0
 350 003e 4869     		ldr	r0, [r1, #20]
 351 0040 0122     		movs	r2, #1
 352 0042 8240     		lsls	r2, r2, r0
 353              	.LVL20:
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Deactivation */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 354              		.loc 1 542 0
 355 0044 D3F81C02 		ldr	r0, [r3, #540]
 356 0048 D443     		mvns	r4, r2
 357 004a 2040     		ands	r0, r0, r4
 358 004c C3F81C02 		str	r0, [r3, #540]
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Scale */
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 359              		.loc 1 545 0
 360 0050 CB69     		ldr	r3, [r1, #28]
 361 0052 B3B9     		cbnz	r3, .L28
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 16-bit scale for the filter */
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 362              		.loc 1 548 0
 363 0054 334B     		ldr	r3, .L37
 364 0056 D3F80C02 		ldr	r0, [r3, #524]
 365 005a 2040     		ands	r0, r0, r4
 366 005c C3F80C02 		str	r0, [r3, #524]
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 367              		.loc 1 552 0
 368 0060 4869     		ldr	r0, [r1, #20]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 369              		.loc 1 553 0
 370 0062 CE68     		ldr	r6, [r1, #12]
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 371              		.loc 1 554 0
 372 0064 8D88     		ldrh	r5, [r1, #4]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 373              		.loc 1 553 0
 374 0066 45EA0645 		orr	r5, r5, r6, lsl #16
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 375              		.loc 1 552 0
ARM GAS  /tmp/ccEAF6Un.s 			page 18


 376 006a 4830     		adds	r0, r0, #72
 377 006c 43F83050 		str	r5, [r3, r0, lsl #3]
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 378              		.loc 1 558 0
 379 0070 4D69     		ldr	r5, [r1, #20]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 380              		.loc 1 559 0
 381 0072 8E68     		ldr	r6, [r1, #8]
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 382              		.loc 1 560 0
 383 0074 0888     		ldrh	r0, [r1]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 384              		.loc 1 559 0
 385 0076 40EA0640 		orr	r0, r0, r6, lsl #16
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 386              		.loc 1 558 0
 387 007a 4835     		adds	r5, r5, #72
 388 007c 03EBC503 		add	r3, r3, r5, lsl #3
 389 0080 5860     		str	r0, [r3, #4]
 390              	.L28:
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 391              		.loc 1 563 0
 392 0082 CB69     		ldr	r3, [r1, #28]
 393 0084 012B     		cmp	r3, #1
 394 0086 16D1     		bne	.L29
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit scale for the filter */
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 395              		.loc 1 566 0
 396 0088 264B     		ldr	r3, .L37
 397 008a D3F80C02 		ldr	r0, [r3, #524]
 398 008e 1043     		orrs	r0, r0, r2
 399 0090 C3F80C02 		str	r0, [r3, #524]
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 400              		.loc 1 569 0
 401 0094 4869     		ldr	r0, [r1, #20]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 402              		.loc 1 570 0
 403 0096 0E68     		ldr	r6, [r1]
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 404              		.loc 1 571 0
 405 0098 8D88     		ldrh	r5, [r1, #4]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 406              		.loc 1 570 0
 407 009a 45EA0645 		orr	r5, r5, r6, lsl #16
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 408              		.loc 1 569 0
 409 009e 4830     		adds	r0, r0, #72
 410 00a0 43F83050 		str	r5, [r3, r0, lsl #3]
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEAF6Un.s 			page 19


 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 411              		.loc 1 574 0
 412 00a4 4D69     		ldr	r5, [r1, #20]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 413              		.loc 1 575 0
 414 00a6 8E68     		ldr	r6, [r1, #8]
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 415              		.loc 1 576 0
 416 00a8 8889     		ldrh	r0, [r1, #12]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 417              		.loc 1 575 0
 418 00aa 40EA0640 		orr	r0, r0, r6, lsl #16
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 419              		.loc 1 574 0
 420 00ae 4835     		adds	r5, r5, #72
 421 00b0 03EBC503 		add	r3, r3, r5, lsl #3
 422 00b4 5860     		str	r0, [r3, #4]
 423              	.L29:
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Mode */
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 424              		.loc 1 580 0
 425 00b6 8B69     		ldr	r3, [r1, #24]
 426 00b8 33B9     		cbnz	r3, .L30
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 427              		.loc 1 583 0
 428 00ba 1A48     		ldr	r0, .L37
 429 00bc D0F80432 		ldr	r3, [r0, #516]
 430 00c0 2340     		ands	r3, r3, r4
 431 00c2 C0F80432 		str	r3, [r0, #516]
 432 00c6 05E0     		b	.L31
 433              	.L30:
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 434              		.loc 1 588 0
 435 00c8 1648     		ldr	r0, .L37
 436 00ca D0F80432 		ldr	r3, [r0, #516]
 437 00ce 1343     		orrs	r3, r3, r2
 438 00d0 C0F80432 		str	r3, [r0, #516]
 439              	.L31:
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter FIFO assignment */
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 440              		.loc 1 592 0
 441 00d4 0B69     		ldr	r3, [r1, #16]
 442 00d6 33B9     		cbnz	r3, .L32
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
ARM GAS  /tmp/ccEAF6Un.s 			page 20


 443              		.loc 1 595 0
 444 00d8 1248     		ldr	r0, .L37
 445 00da D0F81432 		ldr	r3, [r0, #532]
 446 00de 1C40     		ands	r4, r4, r3
 447 00e0 C0F81442 		str	r4, [r0, #532]
 448 00e4 05E0     		b	.L33
 449              	.L32:
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 450              		.loc 1 600 0
 451 00e6 0F48     		ldr	r0, .L37
 452 00e8 D0F81432 		ldr	r3, [r0, #532]
 453 00ec 1343     		orrs	r3, r3, r2
 454 00ee C0F81432 		str	r3, [r0, #532]
 455              	.L33:
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter activation */
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == ENABLE)
 456              		.loc 1 604 0
 457 00f2 0B6A     		ldr	r3, [r1, #32]
 458 00f4 012B     		cmp	r3, #1
 459 00f6 05D1     		bne	.L34
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 460              		.loc 1 606 0
 461 00f8 0A4B     		ldr	r3, .L37
 462 00fa D3F81C12 		ldr	r1, [r3, #540]
 463              	.LVL21:
 464 00fe 0A43     		orrs	r2, r2, r1
 465              	.LVL22:
 466 0100 C3F81C22 		str	r2, [r3, #540]
 467              	.L34:
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 468              		.loc 1 610 0
 469 0104 074A     		ldr	r2, .L37
 470 0106 D2F80032 		ldr	r3, [r2, #512]
 471 010a 23F00103 		bic	r3, r3, #1
 472 010e C2F80032 		str	r3, [r2, #512]
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 473              		.loc 1 613 0
 474 0112 0020     		movs	r0, #0
 475 0114 04E0     		b	.L35
 476              	.LVL23:
 477              	.L27:
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
ARM GAS  /tmp/ccEAF6Un.s 			page 21


 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 478              		.loc 1 618 0
 479 0116 436A     		ldr	r3, [r0, #36]
 480 0118 43F48023 		orr	r3, r3, #262144
 481 011c 4362     		str	r3, [r0, #36]
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 482              		.loc 1 620 0
 483 011e 0120     		movs	r0, #1
 484              	.LVL24:
 485              	.L35:
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 486              		.loc 1 622 0
 487 0120 70BC     		pop	{r4, r5, r6}
 488              	.LCFI3:
 489              		.cfi_restore 6
 490              		.cfi_restore 5
 491              		.cfi_restore 4
 492              		.cfi_def_cfa_offset 0
 493 0122 7047     		bx	lr
 494              	.L38:
 495              		.align	2
 496              	.L37:
 497 0124 00640040 		.word	1073767424
 498              		.cfi_endproc
 499              	.LFE127:
 501              		.section	.text.HAL_CAN_Start,"ax",%progbits
 502              		.align	2
 503              		.global	HAL_CAN_Start
 504              		.thumb
 505              		.thumb_func
 507              	HAL_CAN_Start:
 508              	.LFB128:
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Control functions
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                       ##### Control functions #####
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              and activate the corresponding
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              transmission request
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
ARM GAS  /tmp/ccEAF6Un.s 			page 22


 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Start the CAN module.
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 509              		.loc 1 662 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              	.LVL25:
 514 0000 38B5     		push	{r3, r4, r5, lr}
 515              	.LCFI4:
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 3, -16
 518              		.cfi_offset 4, -12
 519              		.cfi_offset 5, -8
 520              		.cfi_offset 14, -4
 521              	.LVL26:
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 522              		.loc 1 665 0
 523 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 524 0006 DBB2     		uxtb	r3, r3
 525 0008 012B     		cmp	r3, #1
 526 000a 22D1     		bne	.L40
 527 000c 0446     		mov	r4, r0
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 528              		.loc 1 668 0
 529 000e 0223     		movs	r3, #2
 530 0010 80F82030 		strb	r3, [r0, #32]
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request leave initialisation */
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 531              		.loc 1 671 0
 532 0014 0268     		ldr	r2, [r0]
 533 0016 1368     		ldr	r3, [r2]
 534 0018 23F00103 		bic	r3, r3, #1
 535 001c 1360     		str	r3, [r2]
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 536              		.loc 1 674 0
ARM GAS  /tmp/ccEAF6Un.s 			page 23


 537 001e FFF7FEFF 		bl	HAL_GetTick
 538              	.LVL27:
 539 0022 0546     		mov	r5, r0
 540              	.LVL28:
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 541              		.loc 1 677 0
 542 0024 0DE0     		b	.L41
 543              	.LVL29:
 544              	.L43:
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 545              		.loc 1 680 0
 546 0026 FFF7FEFF 		bl	HAL_GetTick
 547              	.LVL30:
 548 002a 401B     		subs	r0, r0, r5
 549 002c 0A28     		cmp	r0, #10
 550 002e 08D9     		bls	.L41
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 551              		.loc 1 683 0
 552 0030 636A     		ldr	r3, [r4, #36]
 553 0032 43F40033 		orr	r3, r3, #131072
 554 0036 6362     		str	r3, [r4, #36]
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 555              		.loc 1 686 0
 556 0038 0523     		movs	r3, #5
 557 003a 84F82030 		strb	r3, [r4, #32]
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 558              		.loc 1 688 0
 559 003e 0120     		movs	r0, #1
 560 0040 38BD     		pop	{r3, r4, r5, pc}
 561              	.LVL31:
 562              	.L41:
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 563              		.loc 1 677 0
 564 0042 2368     		ldr	r3, [r4]
 565 0044 5B68     		ldr	r3, [r3, #4]
 566 0046 13F0010F 		tst	r3, #1
 567 004a ECD1     		bne	.L43
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 568              		.loc 1 693 0
 569 004c 0020     		movs	r0, #0
 570 004e 6062     		str	r0, [r4, #36]
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
ARM GAS  /tmp/ccEAF6Un.s 			page 24


 571              		.loc 1 696 0
 572 0050 38BD     		pop	{r3, r4, r5, pc}
 573              	.LVL32:
 574              	.L40:
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 575              		.loc 1 701 0
 576 0052 436A     		ldr	r3, [r0, #36]
 577 0054 43F40023 		orr	r3, r3, #524288
 578 0058 4362     		str	r3, [r0, #36]
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 579              		.loc 1 703 0
 580 005a 0120     		movs	r0, #1
 581              	.LVL33:
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 582              		.loc 1 705 0
 583 005c 38BD     		pop	{r3, r4, r5, pc}
 584              		.cfi_endproc
 585              	.LFE128:
 587 005e 00BF     		.section	.text.HAL_CAN_Stop,"ax",%progbits
 588              		.align	2
 589              		.global	HAL_CAN_Stop
 590              		.thumb
 591              		.thumb_func
 593              	HAL_CAN_Stop:
 594              	.LFB129:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 595              		.loc 1 714 0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              	.LVL34:
 600 0000 38B5     		push	{r3, r4, r5, lr}
 601              	.LCFI5:
 602              		.cfi_def_cfa_offset 16
 603              		.cfi_offset 3, -16
 604              		.cfi_offset 4, -12
 605              		.cfi_offset 5, -8
 606              		.cfi_offset 14, -4
 607              	.LVL35:
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 608              		.loc 1 717 0
ARM GAS  /tmp/ccEAF6Un.s 			page 25


 609 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 610 0006 DBB2     		uxtb	r3, r3
 611 0008 022B     		cmp	r3, #2
 612 000a 25D1     		bne	.L46
 613 000c 0446     		mov	r4, r0
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request initialisation */
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 614              		.loc 1 720 0
 615 000e 0268     		ldr	r2, [r0]
 616 0010 1368     		ldr	r3, [r2]
 617 0012 43F00103 		orr	r3, r3, #1
 618 0016 1360     		str	r3, [r2]
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 619              		.loc 1 723 0
 620 0018 FFF7FEFF 		bl	HAL_GetTick
 621              	.LVL36:
 622 001c 0546     		mov	r5, r0
 623              	.LVL37:
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 624              		.loc 1 726 0
 625 001e 0DE0     		b	.L47
 626              	.LVL38:
 627              	.L49:
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 628              		.loc 1 729 0
 629 0020 FFF7FEFF 		bl	HAL_GetTick
 630              	.LVL39:
 631 0024 401B     		subs	r0, r0, r5
 632 0026 0A28     		cmp	r0, #10
 633 0028 08D9     		bls	.L47
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 634              		.loc 1 732 0
 635 002a 636A     		ldr	r3, [r4, #36]
 636 002c 43F40033 		orr	r3, r3, #131072
 637 0030 6362     		str	r3, [r4, #36]
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 638              		.loc 1 735 0
 639 0032 0523     		movs	r3, #5
 640 0034 84F82030 		strb	r3, [r4, #32]
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 641              		.loc 1 737 0
 642 0038 0120     		movs	r0, #1
 643 003a 38BD     		pop	{r3, r4, r5, pc}
 644              	.LVL40:
 645              	.L47:
ARM GAS  /tmp/ccEAF6Un.s 			page 26


 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 646              		.loc 1 726 0
 647 003c 2368     		ldr	r3, [r4]
 648 003e 5A68     		ldr	r2, [r3, #4]
 649 0040 12F0010F 		tst	r2, #1
 650 0044 ECD0     		beq	.L49
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Exit from sleep mode */
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 651              		.loc 1 742 0
 652 0046 1A68     		ldr	r2, [r3]
 653 0048 22F00202 		bic	r2, r2, #2
 654 004c 1A60     		str	r2, [r3]
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 655              		.loc 1 745 0
 656 004e 0123     		movs	r3, #1
 657 0050 84F82030 		strb	r3, [r4, #32]
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 658              		.loc 1 748 0
 659 0054 0020     		movs	r0, #0
 660 0056 38BD     		pop	{r3, r4, r5, pc}
 661              	.LVL41:
 662              	.L46:
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 663              		.loc 1 753 0
 664 0058 436A     		ldr	r3, [r0, #36]
 665 005a 43F48013 		orr	r3, r3, #1048576
 666 005e 4362     		str	r3, [r0, #36]
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 667              		.loc 1 755 0
 668 0060 0120     		movs	r0, #1
 669              	.LVL42:
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 670              		.loc 1 757 0
 671 0062 38BD     		pop	{r3, r4, r5, pc}
 672              		.cfi_endproc
 673              	.LFE129:
 675              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 676              		.align	2
 677              		.global	HAL_CAN_DeInit
 678              		.thumb
 679              		.thumb_func
 681              	HAL_CAN_DeInit:
 682              	.LFB124:
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
ARM GAS  /tmp/ccEAF6Un.s 			page 27


 683              		.loc 1 379 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL43:
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 688              		.loc 1 381 0
 689 0000 80B1     		cbz	r0, .L53
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 690              		.loc 1 379 0
 691 0002 10B5     		push	{r4, lr}
 692              	.LCFI6:
 693              		.cfi_def_cfa_offset 8
 694              		.cfi_offset 4, -8
 695              		.cfi_offset 14, -4
 696 0004 0446     		mov	r4, r0
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 697              		.loc 1 390 0
 698 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 699              	.LVL44:
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 700              		.loc 1 393 0
 701 000a 2046     		mov	r0, r4
 702 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 703              	.LVL45:
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 704              		.loc 1 396 0
 705 0010 2268     		ldr	r2, [r4]
 706 0012 1368     		ldr	r3, [r2]
 707 0014 43F40043 		orr	r3, r3, #32768
 708 0018 1360     		str	r3, [r2]
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 709              		.loc 1 399 0
 710 001a 0020     		movs	r0, #0
 711 001c 6062     		str	r0, [r4, #36]
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 712              		.loc 1 402 0
 713 001e 84F82000 		strb	r0, [r4, #32]
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 714              		.loc 1 405 0
 715 0022 10BD     		pop	{r4, pc}
 716              	.LVL46:
 717              	.L53:
 718              	.LCFI7:
 719              		.cfi_def_cfa_offset 0
 720              		.cfi_restore 4
 721              		.cfi_restore 14
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 722              		.loc 1 383 0
 723 0024 0120     		movs	r0, #1
 724              	.LVL47:
 725 0026 7047     		bx	lr
 726              		.cfi_endproc
 727              	.LFE124:
 729              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 730              		.align	2
 731              		.global	HAL_CAN_RequestSleep
ARM GAS  /tmp/ccEAF6Un.s 			page 28


 732              		.thumb
 733              		.thumb_func
 735              	HAL_CAN_RequestSleep:
 736              	.LFB130:
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of a CAN frame) has been completed.
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 737              		.loc 1 769 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741              		@ link register save eliminated.
 742              	.LVL48:
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 743              		.loc 1 770 0
 744 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 745 0004 DBB2     		uxtb	r3, r3
 746 0006 012B     		cmp	r3, #1
 747 0008 04D0     		beq	.L57
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 748              		.loc 1 771 0 discriminator 1
 749 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 750 000e DBB2     		uxtb	r3, r3
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 751              		.loc 1 770 0 discriminator 1
 752 0010 022B     		cmp	r3, #2
 753 0012 06D1     		bne	.L58
 754              	.L57:
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request Sleep mode */
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 755              		.loc 1 774 0
 756 0014 0268     		ldr	r2, [r0]
 757 0016 1368     		ldr	r3, [r2]
 758 0018 43F00203 		orr	r3, r3, #2
 759 001c 1360     		str	r3, [r2]
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 760              		.loc 1 777 0
 761 001e 0020     		movs	r0, #0
 762              	.LVL49:
 763 0020 7047     		bx	lr
 764              	.LVL50:
 765              	.L58:
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
ARM GAS  /tmp/ccEAF6Un.s 			page 29


 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 766              		.loc 1 782 0
 767 0022 436A     		ldr	r3, [r0, #36]
 768 0024 43F48023 		orr	r3, r3, #262144
 769 0028 4362     		str	r3, [r0, #36]
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 770              		.loc 1 785 0
 771 002a 0120     		movs	r0, #1
 772              	.LVL51:
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 773              		.loc 1 787 0
 774 002c 7047     		bx	lr
 775              		.cfi_endproc
 776              	.LFE130:
 778 002e 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 779              		.align	2
 780              		.global	HAL_CAN_WakeUp
 781              		.thumb
 782              		.thumb_func
 784              	HAL_CAN_WakeUp:
 785              	.LFB131:
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         is exited.
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 786              		.loc 1 798 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 8
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791              	.LVL52:
 792 0000 82B0     		sub	sp, sp, #8
 793              	.LCFI8:
 794              		.cfi_def_cfa_offset 8
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   __IO uint32_t count = 0;
 795              		.loc 1 799 0
 796 0002 0023     		movs	r3, #0
 797 0004 0193     		str	r3, [sp, #4]
 798              	.LVL53:
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timeout = 1000000U;
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 799              		.loc 1 802 0
 800 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 801 000a DBB2     		uxtb	r3, r3
 802 000c 012B     		cmp	r3, #1
ARM GAS  /tmp/ccEAF6Un.s 			page 30


 803 000e 04D0     		beq	.L61
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 804              		.loc 1 803 0 discriminator 1
 805 0010 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 806 0014 DBB2     		uxtb	r3, r3
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 807              		.loc 1 802 0 discriminator 1
 808 0016 022B     		cmp	r3, #2
 809 0018 17D1     		bne	.L62
 810              	.L61:
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wake up request */
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 811              		.loc 1 806 0
 812 001a 0268     		ldr	r2, [r0]
 813 001c 1368     		ldr	r3, [r2]
 814 001e 23F00203 		bic	r3, r3, #2
 815 0022 1360     		str	r3, [r2]
 816              	.L65:
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait sleep mode is exited */
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     do
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check if timeout is reached */
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (++count > timeout)
 817              		.loc 1 812 0
 818 0024 019B     		ldr	r3, [sp, #4]
 819 0026 0133     		adds	r3, r3, #1
 820 0028 0193     		str	r3, [sp, #4]
 821 002a 0B4A     		ldr	r2, .L67
 822 002c 9342     		cmp	r3, r2
 823 002e 05D9     		bls	.L63
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 824              		.loc 1 815 0
 825 0030 436A     		ldr	r3, [r0, #36]
 826 0032 43F40033 		orr	r3, r3, #131072
 827 0036 4362     		str	r3, [r0, #36]
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 828              		.loc 1 817 0
 829 0038 0120     		movs	r0, #1
 830              	.LVL54:
 831 003a 0BE0     		b	.L64
 832              	.LVL55:
 833              	.L63:
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 834              		.loc 1 820 0
 835 003c 0368     		ldr	r3, [r0]
 836 003e 5B68     		ldr	r3, [r3, #4]
 837 0040 13F0020F 		tst	r3, #2
 838 0044 EED1     		bne	.L65
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
ARM GAS  /tmp/ccEAF6Un.s 			page 31


 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 839              		.loc 1 823 0
 840 0046 0020     		movs	r0, #0
 841              	.LVL56:
 842 0048 04E0     		b	.L64
 843              	.LVL57:
 844              	.L62:
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 845              		.loc 1 828 0
 846 004a 436A     		ldr	r3, [r0, #36]
 847 004c 43F48023 		orr	r3, r3, #262144
 848 0050 4362     		str	r3, [r0, #36]
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 849              		.loc 1 830 0
 850 0052 0120     		movs	r0, #1
 851              	.LVL58:
 852              	.L64:
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 853              		.loc 1 832 0
 854 0054 02B0     		add	sp, sp, #8
 855              	.LCFI9:
 856              		.cfi_def_cfa_offset 0
 857              		@ sp needed
 858 0056 7047     		bx	lr
 859              	.L68:
 860              		.align	2
 861              	.L67:
 862 0058 40420F00 		.word	1000000
 863              		.cfi_endproc
 864              	.LFE131:
 866              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 867              		.align	2
 868              		.global	HAL_CAN_IsSleepActive
 869              		.thumb
 870              		.thumb_func
 872              	HAL_CAN_IsSleepActive:
 873              	.LFB132:
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 874              		.loc 1 843 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEAF6Un.s 			page 32


 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879              	.LVL59:
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 880              		.loc 1 846 0
 881 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 882 0004 DBB2     		uxtb	r3, r3
 883 0006 012B     		cmp	r3, #1
 884 0008 04D0     		beq	.L70
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 885              		.loc 1 847 0 discriminator 1
 886 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 887 000e DBB2     		uxtb	r3, r3
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 888              		.loc 1 846 0 discriminator 1
 889 0010 022B     		cmp	r3, #2
 890 0012 06D1     		bne	.L72
 891              	.L70:
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Sleep mode */
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 892              		.loc 1 850 0
 893 0014 0368     		ldr	r3, [r0]
 894 0016 5B68     		ldr	r3, [r3, #4]
 895 0018 13F0020F 		tst	r3, #2
 896 001c 03D1     		bne	.L73
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 897              		.loc 1 844 0
 898 001e 0020     		movs	r0, #0
 899              	.LVL60:
 900 0020 7047     		bx	lr
 901              	.LVL61:
 902              	.L72:
 903 0022 0020     		movs	r0, #0
 904              	.LVL62:
 905 0024 7047     		bx	lr
 906              	.LVL63:
 907              	.L73:
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 908              		.loc 1 852 0
 909 0026 0120     		movs	r0, #1
 910              	.LVL64:
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 911              		.loc 1 858 0
 912 0028 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE132:
 916 002a 00BF     		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 917              		.align	2
ARM GAS  /tmp/ccEAF6Un.s 			page 33


 918              		.global	HAL_CAN_AddTxMessage
 919              		.thumb
 920              		.thumb_func
 922              	HAL_CAN_AddTxMessage:
 923              	.LFB133:
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         corresponding transmission request.
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 924              		.loc 1 873 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 929              	.LVL65:
 930 0000 70B4     		push	{r4, r5, r6}
 931              	.LCFI10:
 932              		.cfi_def_cfa_offset 12
 933              		.cfi_offset 4, -12
 934              		.cfi_offset 5, -8
 935              		.cfi_offset 6, -4
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 936              		.loc 1 890 0
 937 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 938 0006 E4B2     		uxtb	r4, r4
 939 0008 012C     		cmp	r4, #1
 940 000a 04D0     		beq	.L75
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 941              		.loc 1 891 0 discriminator 1
 942 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
ARM GAS  /tmp/ccEAF6Un.s 			page 34


 943 0010 E4B2     		uxtb	r4, r4
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 944              		.loc 1 890 0 discriminator 1
 945 0012 022C     		cmp	r4, #2
 946 0014 65D1     		bne	.L76
 947              	.L75:
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 948              		.loc 1 894 0
 949 0016 0468     		ldr	r4, [r0]
 950 0018 A568     		ldr	r5, [r4, #8]
 951 001a 15F0806F 		tst	r5, #67108864
 952 001e 07D1     		bne	.L77
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 953              		.loc 1 895 0 discriminator 1
 954 0020 A568     		ldr	r5, [r4, #8]
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 955              		.loc 1 894 0 discriminator 1
 956 0022 15F0006F 		tst	r5, #134217728
 957 0026 03D1     		bne	.L77
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 958              		.loc 1 896 0
 959 0028 A568     		ldr	r5, [r4, #8]
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 960              		.loc 1 895 0
 961 002a 15F0805F 		tst	r5, #268435456
 962 002e 52D0     		beq	.L78
 963              	.L77:
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select an empty transmit mailbox */
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 964              		.loc 1 899 0
 965 0030 A468     		ldr	r4, [r4, #8]
 966 0032 C4F30164 		ubfx	r4, r4, #24, #2
 967              	.LVL66:
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Store the Tx mailbox */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *pTxMailbox = 1U << transmitmailbox;
 968              		.loc 1 902 0
 969 0036 0125     		movs	r5, #1
 970 0038 A540     		lsls	r5, r5, r4
 971 003a 1D60     		str	r5, [r3]
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Id */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 972              		.loc 1 905 0
 973 003c 8B68     		ldr	r3, [r1, #8]
 974              	.LVL67:
 975 003e 4BB9     		cbnz	r3, .L79
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 976              		.loc 1 907 0
 977 0040 0568     		ldr	r5, [r0]
 978 0042 0E68     		ldr	r6, [r1]
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 979              		.loc 1 908 0
ARM GAS  /tmp/ccEAF6Un.s 			page 35


 980 0044 CB68     		ldr	r3, [r1, #12]
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 981              		.loc 1 907 0
 982 0046 43EA4656 		orr	r6, r3, r6, lsl #21
 983 004a 04F11803 		add	r3, r4, #24
 984 004e 1B01     		lsls	r3, r3, #4
 985 0050 EE50     		str	r6, [r5, r3]
 986 0052 09E0     		b	.L80
 987              	.L79:
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 988              		.loc 1 912 0
 989 0054 0668     		ldr	r6, [r0]
 990 0056 4D68     		ldr	r5, [r1, #4]
 991 0058 43EAC503 		orr	r3, r3, r5, lsl #3
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 992              		.loc 1 914 0
 993 005c CD68     		ldr	r5, [r1, #12]
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 994              		.loc 1 913 0
 995 005e 2B43     		orrs	r3, r3, r5
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 996              		.loc 1 912 0
 997 0060 04F11805 		add	r5, r4, #24
 998 0064 2D01     		lsls	r5, r5, #4
 999 0066 7351     		str	r3, [r6, r5]
 1000              	.L80:
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the DLC */
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1001              		.loc 1 918 0
 1002 0068 0368     		ldr	r3, [r0]
 1003 006a 0D69     		ldr	r5, [r1, #16]
 1004 006c 04F11806 		add	r6, r4, #24
 1005 0070 03EB0613 		add	r3, r3, r6, lsl #4
 1006 0074 5D60     		str	r5, [r3, #4]
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1007              		.loc 1 921 0
 1008 0076 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1009 0078 012B     		cmp	r3, #1
 1010 007a 06D1     		bne	.L81
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 1011              		.loc 1 923 0
 1012 007c 0368     		ldr	r3, [r0]
 1013 007e 03EB0613 		add	r3, r3, r6, lsl #4
 1014 0082 5968     		ldr	r1, [r3, #4]
 1015              	.LVL68:
 1016 0084 41F48071 		orr	r1, r1, #256
 1017 0088 5960     		str	r1, [r3, #4]
 1018              	.L81:
ARM GAS  /tmp/ccEAF6Un.s 			page 36


 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the data field */
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1019              		.loc 1 927 0
 1020 008a 0168     		ldr	r1, [r0]
 1021 008c D579     		ldrb	r5, [r2, #7]	@ zero_extendqisi2
 1022 008e 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1023 0090 1B04     		lsls	r3, r3, #16
 1024 0092 43EA0563 		orr	r3, r3, r5, lsl #24
 1025 0096 5579     		ldrb	r5, [r2, #5]	@ zero_extendqisi2
 1026 0098 43EA0523 		orr	r3, r3, r5, lsl #8
 1027 009c 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1028 009e 2B43     		orrs	r3, r3, r5
 1029 00a0 2501     		lsls	r5, r4, #4
 1030 00a2 2944     		add	r1, r1, r5
 1031 00a4 C1F88C31 		str	r3, [r1, #396]
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1032              		.loc 1 932 0
 1033 00a8 0168     		ldr	r1, [r0]
 1034 00aa D678     		ldrb	r6, [r2, #3]	@ zero_extendqisi2
 1035 00ac 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1036 00ae 1B04     		lsls	r3, r3, #16
 1037 00b0 43EA0663 		orr	r3, r3, r6, lsl #24
 1038 00b4 5678     		ldrb	r6, [r2, #1]	@ zero_extendqisi2
 1039 00b6 43EA0623 		orr	r3, r3, r6, lsl #8
 1040 00ba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1041              	.LVL69:
 1042 00bc 1343     		orrs	r3, r3, r2
 1043 00be 2944     		add	r1, r1, r5
 1044 00c0 C1F88831 		str	r3, [r1, #392]
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Request transmission */
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1045              		.loc 1 939 0
 1046 00c4 0268     		ldr	r2, [r0]
 1047 00c6 1834     		adds	r4, r4, #24
 1048              	.LVL70:
 1049 00c8 2401     		lsls	r4, r4, #4
 1050              	.LVL71:
 1051 00ca 1359     		ldr	r3, [r2, r4]
 1052 00cc 43F00103 		orr	r3, r3, #1
 1053 00d0 1351     		str	r3, [r2, r4]
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Return function status */
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_OK;
 1054              		.loc 1 942 0
 1055 00d2 0020     		movs	r0, #0
 1056              	.LVL72:
ARM GAS  /tmp/ccEAF6Un.s 			page 37


 1057 00d4 0AE0     		b	.L82
 1058              	.LVL73:
 1059              	.L78:
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1060              		.loc 1 947 0
 1061 00d6 436A     		ldr	r3, [r0, #36]
 1062              	.LVL74:
 1063 00d8 43F40013 		orr	r3, r3, #2097152
 1064 00dc 4362     		str	r3, [r0, #36]
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 1065              		.loc 1 949 0
 1066 00de 0120     		movs	r0, #1
 1067              	.LVL75:
 1068 00e0 04E0     		b	.L82
 1069              	.LVL76:
 1070              	.L76:
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1071              		.loc 1 955 0
 1072 00e2 436A     		ldr	r3, [r0, #36]
 1073              	.LVL77:
 1074 00e4 43F48023 		orr	r3, r3, #262144
 1075 00e8 4362     		str	r3, [r0, #36]
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1076              		.loc 1 957 0
 1077 00ea 0120     		movs	r0, #1
 1078              	.LVL78:
 1079              	.L82:
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1080              		.loc 1 959 0
 1081 00ec 70BC     		pop	{r4, r5, r6}
 1082              	.LCFI11:
 1083              		.cfi_restore 6
 1084              		.cfi_restore 5
 1085              		.cfi_restore 4
 1086              		.cfi_def_cfa_offset 0
 1087 00ee 7047     		bx	lr
 1088              		.cfi_endproc
 1089              	.LFE133:
 1091              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1092              		.align	2
 1093              		.global	HAL_CAN_AbortTxRequest
 1094              		.thumb
 1095              		.thumb_func
 1097              	HAL_CAN_AbortTxRequest:
 1098              	.LFB134:
ARM GAS  /tmp/ccEAF6Un.s 			page 38


 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Abort transmission requests
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1099              		.loc 1 970 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104              	.LVL79:
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1105              		.loc 1 974 0
 1106 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1107 0004 DBB2     		uxtb	r3, r3
 1108 0006 012B     		cmp	r3, #1
 1109 0008 04D0     		beq	.L85
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1110              		.loc 1 975 0 discriminator 1
 1111 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1112 000e DBB2     		uxtb	r3, r3
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1113              		.loc 1 974 0 discriminator 1
 1114 0010 022B     		cmp	r3, #2
 1115 0012 19D1     		bne	.L86
 1116              	.L85:
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 1117              		.loc 1 978 0
 1118 0014 11F0010F 		tst	r1, #1
 1119 0018 04D0     		beq	.L87
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1120              		.loc 1 981 0
 1121 001a 0268     		ldr	r2, [r0]
 1122 001c 9368     		ldr	r3, [r2, #8]
 1123 001e 43F08003 		orr	r3, r3, #128
 1124 0022 9360     		str	r3, [r2, #8]
 1125              	.L87:
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 1126              		.loc 1 985 0
 1127 0024 11F0020F 		tst	r1, #2
 1128 0028 04D0     		beq	.L88
ARM GAS  /tmp/ccEAF6Un.s 			page 39


 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1129              		.loc 1 988 0
 1130 002a 0268     		ldr	r2, [r0]
 1131 002c 9368     		ldr	r3, [r2, #8]
 1132 002e 43F40043 		orr	r3, r3, #32768
 1133 0032 9360     		str	r3, [r2, #8]
 1134              	.L88:
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 1135              		.loc 1 992 0
 1136 0034 11F0040F 		tst	r1, #4
 1137 0038 0CD0     		beq	.L90
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1138              		.loc 1 995 0
 1139 003a 0268     		ldr	r2, [r0]
 1140 003c 9368     		ldr	r3, [r2, #8]
 1141 003e 43F40003 		orr	r3, r3, #8388608
 1142 0042 9360     		str	r3, [r2, #8]
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1143              		.loc 1 999 0
 1144 0044 0020     		movs	r0, #0
 1145              	.LVL80:
 1146 0046 7047     		bx	lr
 1147              	.LVL81:
 1148              	.L86:
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1149              		.loc 1 1004 0
 1150 0048 436A     		ldr	r3, [r0, #36]
 1151 004a 43F48023 		orr	r3, r3, #262144
 1152 004e 4362     		str	r3, [r0, #36]
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1153              		.loc 1 1006 0
 1154 0050 0120     		movs	r0, #1
 1155              	.LVL82:
 1156 0052 7047     		bx	lr
 1157              	.LVL83:
 1158              	.L90:
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1159              		.loc 1 999 0
 1160 0054 0020     		movs	r0, #0
 1161              	.LVL84:
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
ARM GAS  /tmp/ccEAF6Un.s 			page 40


 1162              		.loc 1 1008 0
 1163 0056 7047     		bx	lr
 1164              		.cfi_endproc
 1165              	.LFE134:
 1167              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1168              		.align	2
 1169              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1170              		.thumb
 1171              		.thumb_func
 1173              	HAL_CAN_GetTxMailboxesFreeLevel:
 1174              	.LFB135:
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1175              		.loc 1 1017 0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 1180              	.LVL85:
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t freelevel = 0U;
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1181              		.loc 1 1020 0
 1182 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1183 0004 DBB2     		uxtb	r3, r3
 1184 0006 012B     		cmp	r3, #1
 1185 0008 04D0     		beq	.L92
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1186              		.loc 1 1021 0 discriminator 1
 1187 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1188 000e DBB2     		uxtb	r3, r3
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1189              		.loc 1 1020 0 discriminator 1
 1190 0010 022B     		cmp	r3, #2
 1191 0012 12D1     		bne	.L96
 1192              	.L92:
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 1193              		.loc 1 1024 0
 1194 0014 0368     		ldr	r3, [r0]
 1195 0016 9A68     		ldr	r2, [r3, #8]
 1196 0018 12F0806F 		tst	r2, #67108864
 1197 001c 01D1     		bne	.L97
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1198              		.loc 1 1018 0
 1199 001e 0020     		movs	r0, #0
 1200              	.LVL86:
 1201 0020 00E0     		b	.L94
 1202              	.LVL87:
ARM GAS  /tmp/ccEAF6Un.s 			page 41


 1203              	.L97:
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1204              		.loc 1 1026 0
 1205 0022 0120     		movs	r0, #1
 1206              	.LVL88:
 1207              	.L94:
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 1208              		.loc 1 1030 0
 1209 0024 9A68     		ldr	r2, [r3, #8]
 1210 0026 12F0006F 		tst	r2, #134217728
 1211 002a 00D0     		beq	.L95
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1212              		.loc 1 1032 0
 1213 002c 0130     		adds	r0, r0, #1
 1214              	.LVL89:
 1215              	.L95:
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 1216              		.loc 1 1036 0
 1217 002e 9B68     		ldr	r3, [r3, #8]
 1218 0030 13F0805F 		tst	r3, #268435456
 1219 0034 02D0     		beq	.L93
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1220              		.loc 1 1038 0
 1221 0036 0130     		adds	r0, r0, #1
 1222              	.LVL90:
 1223 0038 7047     		bx	lr
 1224              	.LVL91:
 1225              	.L96:
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1226              		.loc 1 1018 0
 1227 003a 0020     		movs	r0, #0
 1228              	.LVL92:
 1229              	.L93:
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return freelevel;
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1230              		.loc 1 1044 0
 1231 003c 7047     		bx	lr
 1232              		.cfi_endproc
 1233              	.LFE135:
 1235 003e 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1236              		.align	2
 1237              		.global	HAL_CAN_IsTxMessagePending
 1238              		.thumb
 1239              		.thumb_func
ARM GAS  /tmp/ccEAF6Un.s 			page 42


 1241              	HAL_CAN_IsTxMessagePending:
 1242              	.LFB136:
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         Mailboxes.
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *                Tx Mailbox.
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1243              		.loc 1 1059 0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 1247              		@ link register save eliminated.
 1248              	.LVL93:
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1249              		.loc 1 1065 0
 1250 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1251 0004 DBB2     		uxtb	r3, r3
 1252 0006 012B     		cmp	r3, #1
 1253 0008 04D0     		beq	.L99
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1254              		.loc 1 1066 0 discriminator 1
 1255 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1256 000e DBB2     		uxtb	r3, r3
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1257              		.loc 1 1065 0 discriminator 1
 1258 0010 022B     		cmp	r3, #2
 1259 0012 07D1     		bne	.L101
 1260              	.L99:
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1261              		.loc 1 1069 0
 1262 0014 0368     		ldr	r3, [r0]
 1263 0016 9B68     		ldr	r3, [r3, #8]
 1264 0018 8906     		lsls	r1, r1, #26
 1265              	.LVL94:
 1266 001a 0B40     		ands	r3, r3, r1
 1267 001c 9942     		cmp	r1, r3
 1268 001e 03D1     		bne	.L102
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1269              		.loc 1 1060 0
 1270 0020 0020     		movs	r0, #0
ARM GAS  /tmp/ccEAF6Un.s 			page 43


 1271              	.LVL95:
 1272 0022 7047     		bx	lr
 1273              	.LVL96:
 1274              	.L101:
 1275 0024 0020     		movs	r0, #0
 1276              	.LVL97:
 1277 0026 7047     		bx	lr
 1278              	.LVL98:
 1279              	.L102:
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1280              		.loc 1 1071 0
 1281 0028 0120     		movs	r0, #1
 1282              	.LVL99:
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return status */
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1283              		.loc 1 1077 0
 1284 002a 7047     		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE136:
 1288              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1289              		.align	2
 1290              		.global	HAL_CAN_GetTxTimestamp
 1291              		.thumb
 1292              		.thumb_func
 1294              	HAL_CAN_GetTxTimestamp:
 1295              	.LFB137:
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             mode is enabled.
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         read.
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1296              		.loc 1 1090 0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 0
 1299              		@ frame_needed = 0, uses_anonymous_args = 0
 1300              		@ link register save eliminated.
 1301              	.LVL100:
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timestamp = 0U;
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccEAF6Un.s 			page 44


 1302              		.loc 1 1097 0
 1303 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1304 0004 DBB2     		uxtb	r3, r3
 1305 0006 012B     		cmp	r3, #1
 1306 0008 04D0     		beq	.L104
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1307              		.loc 1 1098 0 discriminator 1
 1308 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1309 000e DBB2     		uxtb	r3, r3
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1310              		.loc 1 1097 0 discriminator 1
 1311 0010 022B     		cmp	r3, #2
 1312 0012 0AD1     		bne	.L106
 1313              	.L104:
 1314              	.LVL101:
 1315              	.LBB4:
 1316              	.LBB5:
 1317              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
ARM GAS  /tmp/ccEAF6Un.s 			page 45


  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
ARM GAS  /tmp/ccEAF6Un.s 			page 46


  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccEAF6Un.s 			page 47


 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
ARM GAS  /tmp/ccEAF6Un.s 			page 48


 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEAF6Un.s 			page 49


 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccEAF6Un.s 			page 50


 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  /tmp/ccEAF6Un.s 			page 51


 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
ARM GAS  /tmp/ccEAF6Un.s 			page 52


 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEAF6Un.s 			page 53


 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1318              		.loc 2 531 0
 1319              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1320 0014 91FAA1F1 		rbit r1, r1
 1321              	@ 0 "" 2
 1322              	.LVL102:
 1323              		.thumb
 1324              	.LBE5:
 1325              	.LBE4:
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the Tx mailbox */
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1326              		.loc 1 1101 0
 1327 0018 B1FA81F1 		clz	r1, r1
 1328              	.LVL103:
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get timestamp */
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1329              		.loc 1 1104 0
 1330 001c 0368     		ldr	r3, [r0]
 1331 001e 1831     		adds	r1, r1, #24
 1332              	.LVL104:
ARM GAS  /tmp/ccEAF6Un.s 			page 54


 1333 0020 03EB0111 		add	r1, r3, r1, lsl #4
 1334              	.LVL105:
 1335 0024 4868     		ldr	r0, [r1, #4]
 1336              	.LVL106:
 1337 0026 000C     		lsrs	r0, r0, #16
 1338              	.LVL107:
 1339 0028 7047     		bx	lr
 1340              	.LVL108:
 1341              	.L106:
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 1342              		.loc 1 1091 0
 1343 002a 0020     		movs	r0, #0
 1344              	.LVL109:
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the timestamp */
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return timestamp;
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1345              		.loc 1 1109 0
 1346 002c 7047     		bx	lr
 1347              		.cfi_endproc
 1348              	.LFE137:
 1350 002e 00BF     		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1351              		.align	2
 1352              		.global	HAL_CAN_GetRxMessage
 1353              		.thumb
 1354              		.thumb_func
 1356              	HAL_CAN_GetRxMessage:
 1357              	.LFB138:
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of the Rx frame will be stored.
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1358              		.loc 1 1123 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 1363              	.LVL110:
 1364 0000 30B4     		push	{r4, r5}
 1365              	.LCFI12:
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 4, -8
 1368              		.cfi_offset 5, -4
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccEAF6Un.s 			page 55


 1369              		.loc 1 1126 0
 1370 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1371 0006 E4B2     		uxtb	r4, r4
 1372 0008 012C     		cmp	r4, #1
 1373 000a 05D0     		beq	.L108
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1374              		.loc 1 1127 0 discriminator 1
 1375 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1376 0010 E4B2     		uxtb	r4, r4
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1377              		.loc 1 1126 0 discriminator 1
 1378 0012 022C     		cmp	r4, #2
 1379 0014 40F09280 		bne	.L109
 1380              	.L108:
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the Rx FIFO */
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1381              		.loc 1 1130 0
 1382 0018 51B9     		cbnz	r1, .L110
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 1383              		.loc 1 1133 0
 1384 001a 0468     		ldr	r4, [r0]
 1385 001c E468     		ldr	r4, [r4, #12]
 1386 001e 14F0030F 		tst	r4, #3
 1387 0022 12D1     		bne	.L111
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1388              		.loc 1 1136 0
 1389 0024 436A     		ldr	r3, [r0, #36]
 1390              	.LVL111:
 1391 0026 43F40013 		orr	r3, r3, #2097152
 1392 002a 4362     		str	r3, [r0, #36]
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1393              		.loc 1 1138 0
 1394 002c 0120     		movs	r0, #1
 1395              	.LVL112:
 1396 002e 8CE0     		b	.L112
 1397              	.LVL113:
 1398              	.L110:
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 1399              		.loc 1 1141 0
 1400 0030 0129     		cmp	r1, #1
 1401 0032 0AD1     		bne	.L111
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 1402              		.loc 1 1144 0
 1403 0034 0468     		ldr	r4, [r0]
 1404 0036 2469     		ldr	r4, [r4, #16]
 1405 0038 14F0030F 		tst	r4, #3
 1406 003c 05D1     		bne	.L111
ARM GAS  /tmp/ccEAF6Un.s 			page 56


1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1407              		.loc 1 1147 0
 1408 003e 436A     		ldr	r3, [r0, #36]
 1409              	.LVL114:
 1410 0040 43F40013 		orr	r3, r3, #2097152
 1411 0044 4362     		str	r3, [r0, #36]
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1412              		.loc 1 1149 0
 1413 0046 0120     		movs	r0, #1
 1414              	.LVL115:
 1415 0048 7FE0     		b	.L112
 1416              	.LVL116:
 1417              	.L111:
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the header */
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1418              		.loc 1 1154 0
 1419 004a 0568     		ldr	r5, [r0]
 1420 004c 01F11B04 		add	r4, r1, #27
 1421 0050 2401     		lsls	r4, r4, #4
 1422 0052 2C59     		ldr	r4, [r5, r4]
 1423 0054 04F00404 		and	r4, r4, #4
 1424 0058 9460     		str	r4, [r2, #8]
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1425              		.loc 1 1155 0
 1426 005a 3CB9     		cbnz	r4, .L113
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1427              		.loc 1 1157 0
 1428 005c 0568     		ldr	r5, [r0]
 1429 005e 01F11B04 		add	r4, r1, #27
 1430 0062 2401     		lsls	r4, r4, #4
 1431 0064 2C59     		ldr	r4, [r5, r4]
 1432 0066 640D     		lsrs	r4, r4, #21
 1433 0068 1460     		str	r4, [r2]
 1434 006a 06E0     		b	.L114
 1435              	.L113:
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1436              		.loc 1 1161 0
 1437 006c 0568     		ldr	r5, [r0]
 1438 006e 01F11B04 		add	r4, r1, #27
 1439 0072 2401     		lsls	r4, r4, #4
 1440 0074 2C59     		ldr	r4, [r5, r4]
 1441 0076 E408     		lsrs	r4, r4, #3
 1442 0078 5460     		str	r4, [r2, #4]
 1443              	.L114:
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 1444              		.loc 1 1163 0
ARM GAS  /tmp/ccEAF6Un.s 			page 57


 1445 007a 0568     		ldr	r5, [r0]
 1446 007c 01F11B04 		add	r4, r1, #27
 1447 0080 2401     		lsls	r4, r4, #4
 1448 0082 2D59     		ldr	r5, [r5, r4]
 1449 0084 C5F34005 		ubfx	r5, r5, #1, #1
 1450 0088 D560     		str	r5, [r2, #12]
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1451              		.loc 1 1164 0
 1452 008a 0568     		ldr	r5, [r0]
 1453 008c 2544     		add	r5, r5, r4
 1454 008e 6D68     		ldr	r5, [r5, #4]
 1455 0090 05F00F05 		and	r5, r5, #15
 1456 0094 1561     		str	r5, [r2, #16]
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1457              		.loc 1 1165 0
 1458 0096 0568     		ldr	r5, [r0]
 1459 0098 2544     		add	r5, r5, r4
 1460 009a 6D68     		ldr	r5, [r5, #4]
 1461 009c C5F30725 		ubfx	r5, r5, #8, #8
 1462 00a0 9561     		str	r5, [r2, #24]
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1463              		.loc 1 1166 0
 1464 00a2 0568     		ldr	r5, [r0]
 1465 00a4 2C44     		add	r4, r4, r5
 1466 00a6 6468     		ldr	r4, [r4, #4]
 1467 00a8 240C     		lsrs	r4, r4, #16
 1468 00aa 5461     		str	r4, [r2, #20]
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the data */
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos
 1469              		.loc 1 1169 0
 1470 00ac 0468     		ldr	r4, [r0]
 1471 00ae 0A01     		lsls	r2, r1, #4
 1472              	.LVL117:
 1473 00b0 1444     		add	r4, r4, r2
 1474 00b2 D4F8B841 		ldr	r4, [r4, #440]
 1475 00b6 1C70     		strb	r4, [r3]
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos
 1476              		.loc 1 1170 0
 1477 00b8 0468     		ldr	r4, [r0]
 1478 00ba 1444     		add	r4, r4, r2
 1479 00bc D4F8B841 		ldr	r4, [r4, #440]
 1480 00c0 C4F30724 		ubfx	r4, r4, #8, #8
 1481 00c4 5C70     		strb	r4, [r3, #1]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos
 1482              		.loc 1 1171 0
 1483 00c6 0468     		ldr	r4, [r0]
 1484 00c8 1444     		add	r4, r4, r2
 1485 00ca D4F8B841 		ldr	r4, [r4, #440]
 1486 00ce C4F30744 		ubfx	r4, r4, #16, #8
 1487 00d2 9C70     		strb	r4, [r3, #2]
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos
 1488              		.loc 1 1172 0
 1489 00d4 0468     		ldr	r4, [r0]
 1490 00d6 1444     		add	r4, r4, r2
 1491 00d8 D4F8B841 		ldr	r4, [r4, #440]
 1492 00dc 240E     		lsrs	r4, r4, #24
ARM GAS  /tmp/ccEAF6Un.s 			page 58


 1493 00de DC70     		strb	r4, [r3, #3]
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos
 1494              		.loc 1 1173 0
 1495 00e0 0468     		ldr	r4, [r0]
 1496 00e2 1444     		add	r4, r4, r2
 1497 00e4 04F5DC74 		add	r4, r4, #440
 1498 00e8 6468     		ldr	r4, [r4, #4]
 1499 00ea 1C71     		strb	r4, [r3, #4]
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos
 1500              		.loc 1 1174 0
 1501 00ec 0468     		ldr	r4, [r0]
 1502 00ee 1444     		add	r4, r4, r2
 1503 00f0 04F5DC74 		add	r4, r4, #440
 1504 00f4 6468     		ldr	r4, [r4, #4]
 1505 00f6 C4F30724 		ubfx	r4, r4, #8, #8
 1506 00fa 5C71     		strb	r4, [r3, #5]
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos
 1507              		.loc 1 1175 0
 1508 00fc 0468     		ldr	r4, [r0]
 1509 00fe 1444     		add	r4, r4, r2
 1510 0100 04F5DC74 		add	r4, r4, #440
 1511 0104 6468     		ldr	r4, [r4, #4]
 1512 0106 C4F30744 		ubfx	r4, r4, #16, #8
 1513 010a 9C71     		strb	r4, [r3, #6]
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos
 1514              		.loc 1 1176 0
 1515 010c 0468     		ldr	r4, [r0]
 1516 010e 2244     		add	r2, r2, r4
 1517 0110 02F5DC72 		add	r2, r2, #440
 1518 0114 5268     		ldr	r2, [r2, #4]
 1519 0116 120E     		lsrs	r2, r2, #24
 1520 0118 DA71     		strb	r2, [r3, #7]
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Release the FIFO */
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1521              		.loc 1 1179 0
 1522 011a 31B9     		cbnz	r1, .L115
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 0 */
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1523              		.loc 1 1182 0
 1524 011c 0268     		ldr	r2, [r0]
 1525 011e D368     		ldr	r3, [r2, #12]
 1526              	.LVL118:
 1527 0120 43F02003 		orr	r3, r3, #32
 1528 0124 D360     		str	r3, [r2, #12]
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 1 */
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1529              		.loc 1 1191 0
 1530 0126 0020     		movs	r0, #0
ARM GAS  /tmp/ccEAF6Un.s 			page 59


 1531              	.LVL119:
 1532 0128 0FE0     		b	.L112
 1533              	.LVL120:
 1534              	.L115:
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1535              		.loc 1 1184 0
 1536 012a 0129     		cmp	r1, #1
 1537 012c 0CD1     		bne	.L116
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1538              		.loc 1 1187 0
 1539 012e 0268     		ldr	r2, [r0]
 1540 0130 1369     		ldr	r3, [r2, #16]
 1541              	.LVL121:
 1542 0132 43F02003 		orr	r3, r3, #32
 1543 0136 1361     		str	r3, [r2, #16]
 1544              		.loc 1 1191 0
 1545 0138 0020     		movs	r0, #0
 1546              	.LVL122:
 1547 013a 06E0     		b	.L112
 1548              	.LVL123:
 1549              	.L109:
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1550              		.loc 1 1196 0
 1551 013c 436A     		ldr	r3, [r0, #36]
 1552              	.LVL124:
 1553 013e 43F48023 		orr	r3, r3, #262144
 1554 0142 4362     		str	r3, [r0, #36]
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1555              		.loc 1 1198 0
 1556 0144 0120     		movs	r0, #1
 1557              	.LVL125:
 1558 0146 00E0     		b	.L112
 1559              	.LVL126:
 1560              	.L116:
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1561              		.loc 1 1191 0
 1562 0148 0020     		movs	r0, #0
 1563              	.LVL127:
 1564              	.L112:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1565              		.loc 1 1200 0
 1566 014a 30BC     		pop	{r4, r5}
 1567              	.LCFI13:
 1568              		.cfi_restore 5
 1569              		.cfi_restore 4
 1570              		.cfi_def_cfa_offset 0
 1571 014c 7047     		bx	lr
 1572              		.cfi_endproc
 1573              	.LFE138:
 1575 014e 00BF     		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1576              		.align	2
ARM GAS  /tmp/ccEAF6Un.s 			page 60


 1577              		.global	HAL_CAN_GetRxFifoFillLevel
 1578              		.thumb
 1579              		.thumb_func
 1581              	HAL_CAN_GetRxFifoFillLevel:
 1582              	.LFB139:
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1583              		.loc 1 1211 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
 1588              	.LVL128:
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filllevel = 0U;
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1589              		.loc 1 1217 0
 1590 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1591 0004 DBB2     		uxtb	r3, r3
 1592 0006 012B     		cmp	r3, #1
 1593 0008 04D0     		beq	.L119
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1594              		.loc 1 1218 0 discriminator 1
 1595 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1596 000e DBB2     		uxtb	r3, r3
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1597              		.loc 1 1217 0 discriminator 1
 1598 0010 022B     		cmp	r3, #2
 1599 0012 0AD1     		bne	.L122
 1600              	.L119:
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 1601              		.loc 1 1220 0
 1602 0014 21B9     		cbnz	r1, .L121
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 1603              		.loc 1 1222 0
 1604 0016 0368     		ldr	r3, [r0]
 1605 0018 D868     		ldr	r0, [r3, #12]
 1606              	.LVL129:
 1607 001a 00F00300 		and	r0, r0, #3
 1608              	.LVL130:
 1609 001e 7047     		bx	lr
 1610              	.LVL131:
 1611              	.L121:
ARM GAS  /tmp/ccEAF6Un.s 			page 61


1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 1612              		.loc 1 1226 0
 1613 0020 0368     		ldr	r3, [r0]
 1614 0022 1869     		ldr	r0, [r3, #16]
 1615              	.LVL132:
 1616 0024 00F00300 		and	r0, r0, #3
 1617              	.LVL133:
 1618 0028 7047     		bx	lr
 1619              	.LVL134:
 1620              	.L122:
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1621              		.loc 1 1212 0
 1622 002a 0020     		movs	r0, #0
 1623              	.LVL135:
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return filllevel;
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1624              		.loc 1 1232 0
 1625 002c 7047     		bx	lr
 1626              		.cfi_endproc
 1627              	.LFE139:
 1629 002e 00BF     		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1630              		.align	2
 1631              		.global	HAL_CAN_ActivateNotification
 1632              		.thumb
 1633              		.thumb_func
 1635              	HAL_CAN_ActivateNotification:
 1636              	.LFB140:
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Interrupts management
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                        ##### Interrupts management #####
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Enable interrupts.
ARM GAS  /tmp/ccEAF6Un.s 			page 62


1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1637              		.loc 1 1263 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 1641              		@ link register save eliminated.
 1642              	.LVL136:
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1643              		.loc 1 1267 0
 1644 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1645 0004 DBB2     		uxtb	r3, r3
 1646 0006 012B     		cmp	r3, #1
 1647 0008 04D0     		beq	.L124
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1648              		.loc 1 1268 0 discriminator 1
 1649 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1650 000e DBB2     		uxtb	r3, r3
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1651              		.loc 1 1267 0 discriminator 1
 1652 0010 022B     		cmp	r3, #2
 1653 0012 05D1     		bne	.L125
 1654              	.L124:
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Enable the selected interrupts */
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 1655              		.loc 1 1271 0
 1656 0014 0368     		ldr	r3, [r0]
 1657 0016 5A69     		ldr	r2, [r3, #20]
 1658 0018 1143     		orrs	r1, r1, r2
 1659              	.LVL137:
 1660 001a 5961     		str	r1, [r3, #20]
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1661              		.loc 1 1274 0
 1662 001c 0020     		movs	r0, #0
 1663              	.LVL138:
 1664 001e 7047     		bx	lr
 1665              	.LVL139:
 1666              	.L125:
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1667              		.loc 1 1279 0
 1668 0020 436A     		ldr	r3, [r0, #36]
ARM GAS  /tmp/ccEAF6Un.s 			page 63


 1669 0022 43F48023 		orr	r3, r3, #262144
 1670 0026 4362     		str	r3, [r0, #36]
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1671              		.loc 1 1281 0
 1672 0028 0120     		movs	r0, #1
 1673              	.LVL140:
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1674              		.loc 1 1283 0
 1675 002a 7047     		bx	lr
 1676              		.cfi_endproc
 1677              	.LFE140:
 1679              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1680              		.align	2
 1681              		.global	HAL_CAN_DeactivateNotification
 1682              		.thumb
 1683              		.thumb_func
 1685              	HAL_CAN_DeactivateNotification:
 1686              	.LFB141:
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Disable interrupts.
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1687              		.loc 1 1294 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692              	.LVL141:
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1693              		.loc 1 1298 0
 1694 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1695 0004 DBB2     		uxtb	r3, r3
 1696 0006 012B     		cmp	r3, #1
 1697 0008 04D0     		beq	.L128
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1698              		.loc 1 1299 0 discriminator 1
 1699 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1700 000e DBB2     		uxtb	r3, r3
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1701              		.loc 1 1298 0 discriminator 1
 1702 0010 022B     		cmp	r3, #2
 1703 0012 06D1     		bne	.L129
 1704              	.L128:
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Disable the selected interrupts */
ARM GAS  /tmp/ccEAF6Un.s 			page 64


1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 1705              		.loc 1 1302 0
 1706 0014 0268     		ldr	r2, [r0]
 1707 0016 5369     		ldr	r3, [r2, #20]
 1708 0018 23EA0101 		bic	r1, r3, r1
 1709              	.LVL142:
 1710 001c 5161     		str	r1, [r2, #20]
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1711              		.loc 1 1305 0
 1712 001e 0020     		movs	r0, #0
 1713              	.LVL143:
 1714 0020 7047     		bx	lr
 1715              	.LVL144:
 1716              	.L129:
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1717              		.loc 1 1310 0
 1718 0022 436A     		ldr	r3, [r0, #36]
 1719 0024 43F48023 		orr	r3, r3, #262144
 1720 0028 4362     		str	r3, [r0, #36]
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1721              		.loc 1 1312 0
 1722 002a 0120     		movs	r0, #1
 1723              	.LVL145:
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1724              		.loc 1 1314 0
 1725 002c 7047     		bx	lr
 1726              		.cfi_endproc
 1727              	.LFE141:
 1729 002e 00BF     		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1730              		.align	2
 1731              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1732              		.thumb
 1733              		.thumb_func
 1735              	HAL_CAN_TxMailbox0CompleteCallback:
 1736              	.LFB143:
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
ARM GAS  /tmp/ccEAF6Un.s 			page 65


1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != RESET)
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != RESET)
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != RESET)
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != RESET)
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != RESET)
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != RESET)
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != RESET)
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
ARM GAS  /tmp/ccEAF6Un.s 			page 66


1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != RESET)
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != RESET)
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != RESET)
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != RESET)
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != RESET)
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEAF6Un.s 			page 67


1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
ARM GAS  /tmp/ccEAF6Un.s 			page 68


1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != RESET)
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep Callback */
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != RESET)
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != RESET)
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear WakeUp Flag */
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* WakeUp Callback */
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != RESET)
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != RESET)
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Warning Flag */
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Passive Flag */
ARM GAS  /tmp/ccEAF6Un.s 			page 69


1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Bus-off Flag */
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Last Error Code Flag */
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Form error */
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to CRC error */
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Clear Last error code Flag */
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
ARM GAS  /tmp/ccEAF6Un.s 			page 70


1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Clear ERRI Flag */
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code in handle */
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call Error callback function */
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call weak (surcharged) callback */
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Callback functions
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                           ##### Callback functions #####
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides the following callback functions:
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1737              		.loc 1 1669 0
ARM GAS  /tmp/ccEAF6Un.s 			page 71


 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 0
 1740              		@ frame_needed = 0, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
 1742              	.LVL146:
 1743 0000 7047     		bx	lr
 1744              		.cfi_endproc
 1745              	.LFE143:
 1747 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1748              		.align	2
 1749              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1750              		.thumb
 1751              		.thumb_func
 1753              	HAL_CAN_TxMailbox1CompleteCallback:
 1754              	.LFB144:
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1755              		.loc 1 1686 0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              		@ link register save eliminated.
 1760              	.LVL147:
 1761 0000 7047     		bx	lr
 1762              		.cfi_endproc
 1763              	.LFE144:
 1765 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1766              		.align	2
 1767              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1768              		.thumb
 1769              		.thumb_func
 1771              	HAL_CAN_TxMailbox2CompleteCallback:
 1772              	.LFB145:
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEAF6Un.s 			page 72


1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1773              		.loc 1 1703 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777              		@ link register save eliminated.
 1778              	.LVL148:
 1779 0000 7047     		bx	lr
 1780              		.cfi_endproc
 1781              	.LFE145:
 1783 0002 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1784              		.align	2
 1785              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1786              		.thumb
 1787              		.thumb_func
 1789              	HAL_CAN_TxMailbox0AbortCallback:
 1790              	.LFB146:
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1791              		.loc 1 1720 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              		@ link register save eliminated.
 1796              	.LVL149:
 1797 0000 7047     		bx	lr
 1798              		.cfi_endproc
 1799              	.LFE146:
 1801 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1802              		.align	2
 1803              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1804              		.thumb
 1805              		.thumb_func
 1807              	HAL_CAN_TxMailbox1AbortCallback:
 1808              	.LFB147:
ARM GAS  /tmp/ccEAF6Un.s 			page 73


1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1809              		.loc 1 1737 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813              		@ link register save eliminated.
 1814              	.LVL150:
 1815 0000 7047     		bx	lr
 1816              		.cfi_endproc
 1817              	.LFE147:
 1819 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1820              		.align	2
 1821              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1822              		.thumb
 1823              		.thumb_func
 1825              	HAL_CAN_TxMailbox2AbortCallback:
 1826              	.LFB148:
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1827              		.loc 1 1754 0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 0
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
 1832              	.LVL151:
 1833 0000 7047     		bx	lr
ARM GAS  /tmp/ccEAF6Un.s 			page 74


 1834              		.cfi_endproc
 1835              	.LFE148:
 1837 0002 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1838              		.align	2
 1839              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1840              		.thumb
 1841              		.thumb_func
 1843              	HAL_CAN_RxFifo0MsgPendingCallback:
 1844              	.LFB149:
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1845              		.loc 1 1771 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 0, uses_anonymous_args = 0
 1849              		@ link register save eliminated.
 1850              	.LVL152:
 1851 0000 7047     		bx	lr
 1852              		.cfi_endproc
 1853              	.LFE149:
 1855 0002 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1856              		.align	2
 1857              		.weak	HAL_CAN_RxFifo0FullCallback
 1858              		.thumb
 1859              		.thumb_func
 1861              	HAL_CAN_RxFifo0FullCallback:
 1862              	.LFB150:
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
ARM GAS  /tmp/ccEAF6Un.s 			page 75


1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1863              		.loc 1 1788 0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              		@ link register save eliminated.
 1868              	.LVL153:
 1869 0000 7047     		bx	lr
 1870              		.cfi_endproc
 1871              	.LFE150:
 1873 0002 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1874              		.align	2
 1875              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1876              		.thumb
 1877              		.thumb_func
 1879              	HAL_CAN_RxFifo1MsgPendingCallback:
 1880              	.LFB151:
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1881              		.loc 1 1805 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886              	.LVL154:
 1887 0000 7047     		bx	lr
 1888              		.cfi_endproc
 1889              	.LFE151:
 1891 0002 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1892              		.align	2
 1893              		.weak	HAL_CAN_RxFifo1FullCallback
 1894              		.thumb
 1895              		.thumb_func
 1897              	HAL_CAN_RxFifo1FullCallback:
 1898              	.LFB152:
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
ARM GAS  /tmp/ccEAF6Un.s 			page 76


1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1899              		.loc 1 1822 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              		@ link register save eliminated.
 1904              	.LVL155:
 1905 0000 7047     		bx	lr
 1906              		.cfi_endproc
 1907              	.LFE152:
 1909 0002 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1910              		.align	2
 1911              		.weak	HAL_CAN_SleepCallback
 1912              		.thumb
 1913              		.thumb_func
 1915              	HAL_CAN_SleepCallback:
 1916              	.LFB153:
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Sleep callback.
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1917              		.loc 1 1839 0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              		@ link register save eliminated.
 1922              	.LVL156:
 1923 0000 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE153:
 1927 0002 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 1928              		.align	2
 1929              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1930              		.thumb
ARM GAS  /tmp/ccEAF6Un.s 			page 77


 1931              		.thumb_func
 1933              	HAL_CAN_WakeUpFromRxMsgCallback:
 1934              	.LFB154:
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1935              		.loc 1 1855 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 0
 1938              		@ frame_needed = 0, uses_anonymous_args = 0
 1939              		@ link register save eliminated.
 1940              	.LVL157:
 1941 0000 7047     		bx	lr
 1942              		.cfi_endproc
 1943              	.LFE154:
 1945 0002 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1946              		.align	2
 1947              		.weak	HAL_CAN_ErrorCallback
 1948              		.thumb
 1949              		.thumb_func
 1951              	HAL_CAN_ErrorCallback:
 1952              	.LFB155:
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Error CAN callback.
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1953              		.loc 1 1872 0
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 0
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 1957              		@ link register save eliminated.
ARM GAS  /tmp/ccEAF6Un.s 			page 78


 1958              	.LVL158:
 1959 0000 7047     		bx	lr
 1960              		.cfi_endproc
 1961              	.LFE155:
 1963 0002 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1964              		.align	2
 1965              		.global	HAL_CAN_IRQHandler
 1966              		.thumb
 1967              		.thumb_func
 1969              	HAL_CAN_IRQHandler:
 1970              	.LFB142:
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1971              		.loc 1 1323 0
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 0
 1974              		@ frame_needed = 0, uses_anonymous_args = 0
 1975              	.LVL159:
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1976              		.loc 1 1323 0
 1977 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1978              	.LCFI14:
 1979              		.cfi_def_cfa_offset 40
 1980              		.cfi_offset 3, -40
 1981              		.cfi_offset 4, -36
 1982              		.cfi_offset 5, -32
 1983              		.cfi_offset 6, -28
 1984              		.cfi_offset 7, -24
 1985              		.cfi_offset 8, -20
 1986              		.cfi_offset 9, -16
 1987              		.cfi_offset 10, -12
 1988              		.cfi_offset 11, -8
 1989              		.cfi_offset 14, -4
 1990 0004 0546     		mov	r5, r0
 1991              	.LVL160:
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1992              		.loc 1 1325 0
 1993 0006 0368     		ldr	r3, [r0]
 1994 0008 5C69     		ldr	r4, [r3, #20]
 1995              	.LVL161:
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 1996              		.loc 1 1326 0
 1997 000a 5F68     		ldr	r7, [r3, #4]
 1998              	.LVL162:
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 1999              		.loc 1 1327 0
 2000 000c 9E68     		ldr	r6, [r3, #8]
 2001              	.LVL163:
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2002              		.loc 1 1328 0
 2003 000e D3F80C90 		ldr	r9, [r3, #12]
 2004              	.LVL164:
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2005              		.loc 1 1329 0
 2006 0012 D3F81080 		ldr	r8, [r3, #16]
 2007              	.LVL165:
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2008              		.loc 1 1330 0
ARM GAS  /tmp/ccEAF6Un.s 			page 79


 2009 0016 D3F818A0 		ldr	r10, [r3, #24]
 2010              	.LVL166:
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2011              		.loc 1 1333 0
 2012 001a 14F0010F 		tst	r4, #1
 2013 001e 5AD0     		beq	.L177
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2014              		.loc 1 1336 0
 2015 0020 16F0010F 		tst	r6, #1
 2016 0024 14D0     		beq	.L178
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2017              		.loc 1 1339 0
 2018 0026 0122     		movs	r2, #1
 2019 0028 9A60     		str	r2, [r3, #8]
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2020              		.loc 1 1341 0
 2021 002a 16F0020F 		tst	r6, #2
 2022 002e 04D0     		beq	.L147
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2023              		.loc 1 1345 0
 2024 0030 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2025              	.LVL167:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2026              		.loc 1 1324 0
 2027 0034 4FF0000B 		mov	fp, #0
 2028 0038 12E0     		b	.L146
 2029              	.LVL168:
 2030              	.L147:
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2031              		.loc 1 1349 0
 2032 003a 16F0040F 		tst	r6, #4
 2033 003e 0AD1     		bne	.L179
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2034              		.loc 1 1354 0
 2035 0040 16F0080F 		tst	r6, #8
 2036 0044 0AD1     		bne	.L180
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2037              		.loc 1 1363 0
 2038 0046 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2039              	.LVL169:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2040              		.loc 1 1324 0
 2041 004a 4FF0000B 		mov	fp, #0
 2042 004e 07E0     		b	.L146
 2043              	.LVL170:
 2044              	.L178:
 2045 0050 4FF0000B 		mov	fp, #0
 2046 0054 04E0     		b	.L146
 2047              	.L179:
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2048              		.loc 1 1352 0
 2049 0056 4FF4006B 		mov	fp, #2048
 2050 005a 01E0     		b	.L146
 2051              	.L180:
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2052              		.loc 1 1357 0
 2053 005c 4FF4805B 		mov	fp, #4096
ARM GAS  /tmp/ccEAF6Un.s 			page 80


 2054              	.LVL171:
 2055              	.L146:
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2056              		.loc 1 1369 0
 2057 0060 16F4807F 		tst	r6, #256
 2058 0064 19D0     		beq	.L148
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2059              		.loc 1 1372 0
 2060 0066 2B68     		ldr	r3, [r5]
 2061 0068 4FF48072 		mov	r2, #256
 2062 006c 9A60     		str	r2, [r3, #8]
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2063              		.loc 1 1374 0
 2064 006e 16F4007F 		tst	r6, #512
 2065 0072 03D0     		beq	.L149
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2066              		.loc 1 1378 0
 2067 0074 2846     		mov	r0, r5
 2068 0076 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2069              	.LVL172:
 2070 007a 0EE0     		b	.L148
 2071              	.L149:
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2072              		.loc 1 1382 0
 2073 007c 16F4806F 		tst	r6, #1024
 2074 0080 02D0     		beq	.L150
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2075              		.loc 1 1385 0
 2076 0082 4BF4005B 		orr	fp, fp, #8192
 2077              	.LVL173:
 2078 0086 08E0     		b	.L148
 2079              	.L150:
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2080              		.loc 1 1387 0
 2081 0088 16F4006F 		tst	r6, #2048
 2082 008c 02D0     		beq	.L151
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2083              		.loc 1 1390 0
 2084 008e 4BF4804B 		orr	fp, fp, #16384
 2085              	.LVL174:
 2086 0092 02E0     		b	.L148
 2087              	.L151:
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2088              		.loc 1 1396 0
 2089 0094 2846     		mov	r0, r5
 2090 0096 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2091              	.LVL175:
 2092              	.L148:
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2093              		.loc 1 1402 0
 2094 009a 16F4803F 		tst	r6, #65536
 2095 009e 1CD0     		beq	.L145
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2096              		.loc 1 1405 0
 2097 00a0 2B68     		ldr	r3, [r5]
 2098 00a2 4FF48032 		mov	r2, #65536
 2099 00a6 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccEAF6Un.s 			page 81


1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2100              		.loc 1 1407 0
 2101 00a8 16F4003F 		tst	r6, #131072
 2102 00ac 03D0     		beq	.L152
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2103              		.loc 1 1411 0
 2104 00ae 2846     		mov	r0, r5
 2105 00b0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2106              	.LVL176:
 2107 00b4 11E0     		b	.L145
 2108              	.L152:
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2109              		.loc 1 1415 0
 2110 00b6 16F4802F 		tst	r6, #262144
 2111 00ba 02D0     		beq	.L153
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2112              		.loc 1 1418 0
 2113 00bc 4BF4004B 		orr	fp, fp, #32768
 2114              	.LVL177:
 2115 00c0 0BE0     		b	.L145
 2116              	.L153:
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2117              		.loc 1 1420 0
 2118 00c2 16F4002F 		tst	r6, #524288
 2119 00c6 02D0     		beq	.L154
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2120              		.loc 1 1423 0
 2121 00c8 4BF4803B 		orr	fp, fp, #65536
 2122              	.LVL178:
 2123 00cc 05E0     		b	.L145
 2124              	.L154:
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2125              		.loc 1 1429 0
 2126 00ce 2846     		mov	r0, r5
 2127 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2128              	.LVL179:
 2129 00d4 01E0     		b	.L145
 2130              	.LVL180:
 2131              	.L177:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2132              		.loc 1 1324 0
 2133 00d6 4FF0000B 		mov	fp, #0
 2134              	.LVL181:
 2135              	.L145:
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2136              		.loc 1 1436 0
 2137 00da 14F0080F 		tst	r4, #8
 2138 00de 07D0     		beq	.L155
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2139              		.loc 1 1438 0
 2140 00e0 19F0100F 		tst	r9, #16
 2141 00e4 04D0     		beq	.L155
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2142              		.loc 1 1441 0
 2143 00e6 4BF4007B 		orr	fp, fp, #512
 2144              	.LVL182:
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
ARM GAS  /tmp/ccEAF6Un.s 			page 82


 2145              		.loc 1 1444 0
 2146 00ea 2B68     		ldr	r3, [r5]
 2147 00ec 1022     		movs	r2, #16
 2148 00ee DA60     		str	r2, [r3, #12]
 2149              	.L155:
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2150              		.loc 1 1449 0
 2151 00f0 14F0040F 		tst	r4, #4
 2152 00f4 08D0     		beq	.L156
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2153              		.loc 1 1451 0
 2154 00f6 19F0080F 		tst	r9, #8
 2155 00fa 05D0     		beq	.L156
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2156              		.loc 1 1454 0
 2157 00fc 2B68     		ldr	r3, [r5]
 2158 00fe 0822     		movs	r2, #8
 2159 0100 DA60     		str	r2, [r3, #12]
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2160              		.loc 1 1458 0
 2161 0102 2846     		mov	r0, r5
 2162 0104 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2163              	.LVL183:
 2164              	.L156:
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2165              		.loc 1 1463 0
 2166 0108 14F0020F 		tst	r4, #2
 2167 010c 07D0     		beq	.L157
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2168              		.loc 1 1466 0
 2169 010e 2B68     		ldr	r3, [r5]
 2170 0110 DB68     		ldr	r3, [r3, #12]
 2171 0112 13F0030F 		tst	r3, #3
 2172 0116 02D0     		beq	.L157
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2173              		.loc 1 1470 0
 2174 0118 2846     		mov	r0, r5
 2175 011a FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2176              	.LVL184:
 2177              	.L157:
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2178              		.loc 1 1475 0
 2179 011e 14F0400F 		tst	r4, #64
 2180 0122 07D0     		beq	.L158
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2181              		.loc 1 1477 0
 2182 0124 18F0100F 		tst	r8, #16
 2183 0128 04D0     		beq	.L158
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2184              		.loc 1 1480 0
 2185 012a 4BF4806B 		orr	fp, fp, #1024
 2186              	.LVL185:
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2187              		.loc 1 1483 0
 2188 012e 2B68     		ldr	r3, [r5]
 2189 0130 1022     		movs	r2, #16
 2190 0132 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccEAF6Un.s 			page 83


 2191              	.L158:
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2192              		.loc 1 1488 0
 2193 0134 14F0200F 		tst	r4, #32
 2194 0138 08D0     		beq	.L159
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2195              		.loc 1 1490 0
 2196 013a 18F0080F 		tst	r8, #8
 2197 013e 05D0     		beq	.L159
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2198              		.loc 1 1493 0
 2199 0140 2B68     		ldr	r3, [r5]
 2200 0142 0822     		movs	r2, #8
 2201 0144 1A61     		str	r2, [r3, #16]
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2202              		.loc 1 1497 0
 2203 0146 2846     		mov	r0, r5
 2204 0148 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2205              	.LVL186:
 2206              	.L159:
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2207              		.loc 1 1502 0
 2208 014c 14F0100F 		tst	r4, #16
 2209 0150 07D0     		beq	.L160
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2210              		.loc 1 1505 0
 2211 0152 2B68     		ldr	r3, [r5]
 2212 0154 1B69     		ldr	r3, [r3, #16]
 2213 0156 13F0030F 		tst	r3, #3
 2214 015a 02D0     		beq	.L160
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2215              		.loc 1 1509 0
 2216 015c 2846     		mov	r0, r5
 2217 015e FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2218              	.LVL187:
 2219              	.L160:
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2220              		.loc 1 1514 0
 2221 0162 14F4003F 		tst	r4, #131072
 2222 0166 08D0     		beq	.L161
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2223              		.loc 1 1516 0
 2224 0168 17F0100F 		tst	r7, #16
 2225 016c 05D0     		beq	.L161
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2226              		.loc 1 1519 0
 2227 016e 2B68     		ldr	r3, [r5]
 2228 0170 1022     		movs	r2, #16
 2229 0172 5A60     		str	r2, [r3, #4]
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2230              		.loc 1 1523 0
 2231 0174 2846     		mov	r0, r5
 2232 0176 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2233              	.LVL188:
 2234              	.L161:
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2235              		.loc 1 1528 0
ARM GAS  /tmp/ccEAF6Un.s 			page 84


 2236 017a 14F4803F 		tst	r4, #65536
 2237 017e 08D0     		beq	.L162
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2238              		.loc 1 1530 0
 2239 0180 17F0080F 		tst	r7, #8
 2240 0184 05D0     		beq	.L162
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2241              		.loc 1 1533 0
 2242 0186 2B68     		ldr	r3, [r5]
 2243 0188 0822     		movs	r2, #8
 2244 018a 5A60     		str	r2, [r3, #4]
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2245              		.loc 1 1537 0
 2246 018c 2846     		mov	r0, r5
 2247 018e FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2248              	.LVL189:
 2249              	.L162:
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2250              		.loc 1 1542 0
 2251 0192 14F4004F 		tst	r4, #32768
 2252 0196 4ED0     		beq	.L163
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2253              		.loc 1 1544 0
 2254 0198 17F0040F 		tst	r7, #4
 2255 019c 48D0     		beq	.L164
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2256              		.loc 1 1547 0
 2257 019e 14F4807F 		tst	r4, #256
 2258 01a2 04D0     		beq	.L165
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2259              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2260 01a4 1AF0010F 		tst	r10, #1
 2261 01a8 01D0     		beq	.L165
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2262              		.loc 1 1551 0 is_stmt 1
 2263 01aa 4BF0010B 		orr	fp, fp, #1
 2264              	.LVL190:
 2265              	.L165:
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2266              		.loc 1 1557 0
 2267 01ae 14F4007F 		tst	r4, #512
 2268 01b2 04D0     		beq	.L166
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2269              		.loc 1 1557 0 is_stmt 0 discriminator 1
 2270 01b4 1AF0020F 		tst	r10, #2
 2271 01b8 01D0     		beq	.L166
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2272              		.loc 1 1561 0 is_stmt 1
 2273 01ba 4BF0020B 		orr	fp, fp, #2
 2274              	.LVL191:
 2275              	.L166:
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2276              		.loc 1 1567 0
 2277 01be 14F4806F 		tst	r4, #1024
 2278 01c2 04D0     		beq	.L167
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2279              		.loc 1 1567 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccEAF6Un.s 			page 85


 2280 01c4 1AF0040F 		tst	r10, #4
 2281 01c8 01D0     		beq	.L167
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2282              		.loc 1 1571 0 is_stmt 1
 2283 01ca 4BF0040B 		orr	fp, fp, #4
 2284              	.LVL192:
 2285              	.L167:
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2286              		.loc 1 1577 0
 2287 01ce 14F4006F 		tst	r4, #2048
 2288 01d2 2DD0     		beq	.L164
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2289              		.loc 1 1577 0 is_stmt 0 discriminator 1
 2290 01d4 1AF0700A 		ands	r10, r10, #112
 2291              	.LVL193:
 2292 01d8 2AD0     		beq	.L164
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2293              		.loc 1 1580 0 is_stmt 1
 2294 01da BAF1300F 		cmp	r10, #48
 2295 01de 17D0     		beq	.L169
 2296 01e0 06D8     		bhi	.L170
 2297 01e2 BAF1100F 		cmp	r10, #16
 2298 01e6 0DD0     		beq	.L171
 2299 01e8 BAF1200F 		cmp	r10, #32
 2300 01ec 0DD0     		beq	.L172
 2301 01ee 1AE0     		b	.L168
 2302              	.L170:
 2303 01f0 BAF1500F 		cmp	r10, #80
 2304 01f4 12D0     		beq	.L173
 2305 01f6 BAF1600F 		cmp	r10, #96
 2306 01fa 12D0     		beq	.L174
 2307 01fc BAF1400F 		cmp	r10, #64
 2308 0200 11D1     		bne	.L168
 2309 0202 08E0     		b	.L175
 2310              	.L171:
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2311              		.loc 1 1584 0
 2312 0204 4BF0080B 		orr	fp, fp, #8
 2313              	.LVL194:
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2314              		.loc 1 1585 0
 2315 0208 0DE0     		b	.L168
 2316              	.L172:
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2317              		.loc 1 1588 0
 2318 020a 4BF0100B 		orr	fp, fp, #16
 2319              	.LVL195:
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2320              		.loc 1 1589 0
 2321 020e 0AE0     		b	.L168
 2322              	.L169:
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2323              		.loc 1 1592 0
 2324 0210 4BF0200B 		orr	fp, fp, #32
 2325              	.LVL196:
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2326              		.loc 1 1593 0
ARM GAS  /tmp/ccEAF6Un.s 			page 86


 2327 0214 07E0     		b	.L168
 2328              	.L175:
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2329              		.loc 1 1596 0
 2330 0216 4BF0400B 		orr	fp, fp, #64
 2331              	.LVL197:
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2332              		.loc 1 1597 0
 2333 021a 04E0     		b	.L168
 2334              	.L173:
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2335              		.loc 1 1600 0
 2336 021c 4BF0800B 		orr	fp, fp, #128
 2337              	.LVL198:
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2338              		.loc 1 1601 0
 2339 0220 01E0     		b	.L168
 2340              	.L174:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2341              		.loc 1 1604 0
 2342 0222 4BF4807B 		orr	fp, fp, #256
 2343              	.LVL199:
 2344              	.L168:
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2345              		.loc 1 1611 0
 2346 0226 2A68     		ldr	r2, [r5]
 2347 0228 9369     		ldr	r3, [r2, #24]
 2348 022a 23F07003 		bic	r3, r3, #112
 2349 022e 9361     		str	r3, [r2, #24]
 2350              	.L164:
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2351              		.loc 1 1616 0
 2352 0230 2B68     		ldr	r3, [r5]
 2353 0232 0422     		movs	r2, #4
 2354 0234 5A60     		str	r2, [r3, #4]
 2355              	.L163:
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2356              		.loc 1 1620 0
 2357 0236 BBF1000F 		cmp	fp, #0
 2358 023a 06D0     		beq	.L144
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2359              		.loc 1 1623 0
 2360 023c 6B6A     		ldr	r3, [r5, #36]
 2361 023e 43EA0B03 		orr	r3, r3, fp
 2362 0242 6B62     		str	r3, [r5, #36]
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2363              		.loc 1 1627 0
 2364 0244 2846     		mov	r0, r5
 2365 0246 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2366              	.LVL200:
 2367              	.L144:
 2368 024a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2369              		.cfi_endproc
 2370              	.LFE142:
 2372 024e 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2373              		.align	2
 2374              		.global	HAL_CAN_GetState
ARM GAS  /tmp/ccEAF6Un.s 			page 87


 2375              		.thumb
 2376              		.thumb_func
 2378              	HAL_CAN_GetState:
 2379              	.LFB156:
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides functions allowing to :
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN state.
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL state
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2380              		.loc 1 1909 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              		@ link register save eliminated.
 2385              	.LVL201:
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2386              		.loc 1 1910 0
 2387 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2388 0004 DBB2     		uxtb	r3, r3
 2389              	.LVL202:
1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2390              		.loc 1 1912 0
 2391 0006 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2392 000a D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccEAF6Un.s 			page 88


 2393 000c 012A     		cmp	r2, #1
 2394 000e 04D0     		beq	.L183
1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2395              		.loc 1 1913 0 discriminator 1
 2396 0010 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2397 0014 D2B2     		uxtb	r2, r2
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2398              		.loc 1 1912 0 discriminator 1
 2399 0016 022A     		cmp	r2, #2
 2400 0018 0CD1     		bne	.L184
 2401              	.L183:
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 2402              		.loc 1 1916 0
 2403 001a 0268     		ldr	r2, [r0]
 2404 001c 5168     		ldr	r1, [r2, #4]
 2405 001e 11F0020F 		tst	r1, #2
 2406 0022 04D1     		bne	.L185
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode is active */
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode request flag */
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
 2407              		.loc 1 1922 0
 2408 0024 1268     		ldr	r2, [r2]
 2409 0026 12F0020F 		tst	r2, #2
 2410 002a 02D1     		bne	.L186
 2411 002c 02E0     		b	.L184
 2412              	.L185:
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2413              		.loc 1 1919 0
 2414 002e 0423     		movs	r3, #4
 2415              	.LVL203:
 2416 0030 00E0     		b	.L184
 2417              	.LVL204:
 2418              	.L186:
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode request is pending */
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 2419              		.loc 1 1925 0
 2420 0032 0323     		movs	r3, #3
 2421              	.LVL205:
 2422              	.L184:
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN state */
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return state;
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2423              		.loc 1 1931 0
 2424 0034 1846     		mov	r0, r3
 2425              	.LVL206:
 2426 0036 7047     		bx	lr
 2427              		.cfi_endproc
 2428              	.LFE156:
ARM GAS  /tmp/ccEAF6Un.s 			page 89


 2430              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2431              		.align	2
 2432              		.global	HAL_CAN_GetError
 2433              		.thumb
 2434              		.thumb_func
 2436              	HAL_CAN_GetError:
 2437              	.LFB157:
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN error code.
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval CAN Error Code
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2438              		.loc 1 1940 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442              		@ link register save eliminated.
 2443              	.LVL207:
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN error code */
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return hcan->ErrorCode;
 2444              		.loc 1 1942 0
 2445 0000 406A     		ldr	r0, [r0, #36]
 2446              	.LVL208:
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2447              		.loc 1 1943 0
 2448 0002 7047     		bx	lr
 2449              		.cfi_endproc
 2450              	.LFE157:
 2452              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2453              		.align	2
 2454              		.global	HAL_CAN_ResetError
 2455              		.thumb
 2456              		.thumb_func
 2458              	HAL_CAN_ResetError:
 2459              	.LFB158:
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Reset the CAN error code.
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2460              		.loc 1 1952 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
 2465              	.LVL209:
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccEAF6Un.s 			page 90


 2466              		.loc 1 1955 0
 2467 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2468 0004 DBB2     		uxtb	r3, r3
 2469 0006 012B     		cmp	r3, #1
 2470 0008 04D0     		beq	.L189
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2471              		.loc 1 1956 0 discriminator 1
 2472 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2473 000e DBB2     		uxtb	r3, r3
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2474              		.loc 1 1955 0 discriminator 1
 2475 0010 022B     		cmp	r3, #2
 2476 0012 03D1     		bne	.L190
 2477              	.L189:
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset CAN error code */
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = 0U;
 2478              		.loc 1 1959 0
 2479 0014 0023     		movs	r3, #0
 2480 0016 4362     		str	r3, [r0, #36]
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2481              		.loc 1 1953 0
 2482 0018 1846     		mov	r0, r3
 2483              	.LVL210:
 2484              		.loc 1 1959 0
 2485 001a 7047     		bx	lr
 2486              	.LVL211:
 2487              	.L190:
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2488              		.loc 1 1964 0
 2489 001c 436A     		ldr	r3, [r0, #36]
 2490 001e 43F48023 		orr	r3, r3, #262144
 2491 0022 4362     		str	r3, [r0, #36]
 2492              	.LVL212:
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status = HAL_ERROR;
 2493              		.loc 1 1966 0
 2494 0024 0120     		movs	r0, #1
 2495              	.LVL213:
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the status */
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2496              		.loc 1 1971 0
 2497 0026 7047     		bx	lr
 2498              		.cfi_endproc
 2499              	.LFE158:
 2501              		.text
 2502              	.Letext0:
 2503              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2504              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2505              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
ARM GAS  /tmp/ccEAF6Un.s 			page 91


 2506              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2507              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2508              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2509              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 2510              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccEAF6Un.s 			page 92


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_can.c
     /tmp/ccEAF6Un.s:21     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccEAF6Un.s:26     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccEAF6Un.s:40     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccEAF6Un.s:45     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccEAF6Un.s:282    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccEAF6Un.s:287    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccEAF6Un.s:300    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccEAF6Un.s:305    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccEAF6Un.s:497    .text.HAL_CAN_ConfigFilter:0000000000000124 $d
     /tmp/ccEAF6Un.s:502    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccEAF6Un.s:507    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccEAF6Un.s:588    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccEAF6Un.s:593    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccEAF6Un.s:676    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccEAF6Un.s:681    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccEAF6Un.s:730    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccEAF6Un.s:735    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccEAF6Un.s:779    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccEAF6Un.s:784    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccEAF6Un.s:862    .text.HAL_CAN_WakeUp:0000000000000058 $d
     /tmp/ccEAF6Un.s:867    .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccEAF6Un.s:872    .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccEAF6Un.s:917    .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccEAF6Un.s:922    .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccEAF6Un.s:1092   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccEAF6Un.s:1097   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccEAF6Un.s:1168   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccEAF6Un.s:1173   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccEAF6Un.s:1236   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccEAF6Un.s:1241   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccEAF6Un.s:1289   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccEAF6Un.s:1294   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccEAF6Un.s:1351   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccEAF6Un.s:1356   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccEAF6Un.s:1576   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccEAF6Un.s:1581   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccEAF6Un.s:1630   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccEAF6Un.s:1635   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccEAF6Un.s:1680   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccEAF6Un.s:1685   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccEAF6Un.s:1730   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1735   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccEAF6Un.s:1748   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1753   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccEAF6Un.s:1766   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1771   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccEAF6Un.s:1784   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1789   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccEAF6Un.s:1802   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1807   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccEAF6Un.s:1820   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1825   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccEAF6Un.s:1838   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1843   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccEAF6Un.s:1856   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
ARM GAS  /tmp/ccEAF6Un.s 			page 93


     /tmp/ccEAF6Un.s:1861   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccEAF6Un.s:1874   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1879   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccEAF6Un.s:1892   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1897   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccEAF6Un.s:1910   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1915   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccEAF6Un.s:1928   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1933   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccEAF6Un.s:1946   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccEAF6Un.s:1951   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccEAF6Un.s:1964   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccEAF6Un.s:1969   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccEAF6Un.s:2373   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccEAF6Un.s:2378   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccEAF6Un.s:2431   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccEAF6Un.s:2436   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccEAF6Un.s:2453   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccEAF6Un.s:2458   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
