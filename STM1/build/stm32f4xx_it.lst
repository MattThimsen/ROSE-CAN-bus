ARM GAS  /tmp/ccXvJDqa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_it.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.NMI_Handler,"ax",%progbits
  21              		.align	2
  22              		.global	NMI_Handler
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB123:
  28              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f4xx_it.c **** /**
   3:Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Src/stm32f4xx_it.c ****   *
   8:Src/stm32f4xx_it.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
   9:Src/stm32f4xx_it.c ****   *
  10:Src/stm32f4xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  11:Src/stm32f4xx_it.c ****   * are permitted provided that the following conditions are met:
  12:Src/stm32f4xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  13:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer.
  14:Src/stm32f4xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  15:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  16:Src/stm32f4xx_it.c ****   *      and/or other materials provided with the distribution.
  17:Src/stm32f4xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  18:Src/stm32f4xx_it.c ****   *      may be used to endorse or promote products derived from this software
  19:Src/stm32f4xx_it.c ****   *      without specific prior written permission.
  20:Src/stm32f4xx_it.c ****   *
  21:Src/stm32f4xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Src/stm32f4xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Src/stm32f4xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  24:Src/stm32f4xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  25:Src/stm32f4xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  26:Src/stm32f4xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  27:Src/stm32f4xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  28:Src/stm32f4xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  29:Src/stm32f4xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  30:Src/stm32f4xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
ARM GAS  /tmp/ccXvJDqa.s 			page 2


  31:Src/stm32f4xx_it.c ****   *
  32:Src/stm32f4xx_it.c ****   ******************************************************************************
  33:Src/stm32f4xx_it.c ****   */
  34:Src/stm32f4xx_it.c **** /* USER CODE END Header */
  35:Src/stm32f4xx_it.c **** 
  36:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  37:Src/stm32f4xx_it.c **** #include "main.h"
  38:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  39:Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  40:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  41:Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  42:Src/stm32f4xx_it.c **** 
  43:Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  44:Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  45:Src/stm32f4xx_it.c **** 
  46:Src/stm32f4xx_it.c **** /* USER CODE END TD */
  47:Src/stm32f4xx_it.c **** 
  48:Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  49:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  50:Src/stm32f4xx_it.c ****  
  51:Src/stm32f4xx_it.c **** /* USER CODE END PD */
  52:Src/stm32f4xx_it.c **** 
  53:Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  54:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  55:Src/stm32f4xx_it.c **** 
  56:Src/stm32f4xx_it.c **** /* USER CODE END PM */
  57:Src/stm32f4xx_it.c **** 
  58:Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  59:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  60:Src/stm32f4xx_it.c **** 
  61:Src/stm32f4xx_it.c **** /* USER CODE END PV */
  62:Src/stm32f4xx_it.c **** 
  63:Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  64:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  65:Src/stm32f4xx_it.c **** 
  66:Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  67:Src/stm32f4xx_it.c **** 
  68:Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  69:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  70:Src/stm32f4xx_it.c **** 
  71:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  72:Src/stm32f4xx_it.c **** 
  73:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  74:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  75:Src/stm32f4xx_it.c **** extern CAN_TxHeaderTypeDef pHeader;
  76:Src/stm32f4xx_it.c **** extern CAN_RxHeaderTypeDef pRxHeader;
  77:Src/stm32f4xx_it.c **** extern uint32_t TxMailbox;
  78:Src/stm32f4xx_it.c **** extern uint8_t r;
  79:Src/stm32f4xx_it.c **** extern uint8_t rts; //right turn signal byte
  80:Src/stm32f4xx_it.c **** extern uint8_t lts; //left turn signal byte
  81:Src/stm32f4xx_it.c **** extern uint8_t horn; //horn
  82:Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  83:Src/stm32f4xx_it.c **** 
  84:Src/stm32f4xx_it.c **** /* USER CODE END EV */
  85:Src/stm32f4xx_it.c **** 
  86:Src/stm32f4xx_it.c **** /******************************************************************************/
  87:Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
ARM GAS  /tmp/ccXvJDqa.s 			page 3


  88:Src/stm32f4xx_it.c **** /******************************************************************************/
  89:Src/stm32f4xx_it.c **** /**
  90:Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  91:Src/stm32f4xx_it.c ****   */
  92:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  93:Src/stm32f4xx_it.c **** {
  29              		.loc 1 93 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE123:
  38 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	2
  40              		.global	HardFault_Handler
  41              		.thumb
  42              		.thumb_func
  44              	HardFault_Handler:
  45              	.LFB124:
  94:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  95:Src/stm32f4xx_it.c **** 
  96:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  97:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  98:Src/stm32f4xx_it.c **** 
  99:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
 100:Src/stm32f4xx_it.c **** }
 101:Src/stm32f4xx_it.c **** 
 102:Src/stm32f4xx_it.c **** /**
 103:Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
 104:Src/stm32f4xx_it.c ****   */
 105:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
 106:Src/stm32f4xx_it.c **** {
  46              		.loc 1 106 0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
 107:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 108:Src/stm32f4xx_it.c **** 
 109:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 110:Src/stm32f4xx_it.c ****   while (1)
 111:Src/stm32f4xx_it.c ****   {
 112:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 113:Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 114:Src/stm32f4xx_it.c ****   }
  53              		.loc 1 114 0 discriminator 1
  54 0000 FEE7     		b	.L3
  55              		.cfi_endproc
  56              	.LFE124:
  58 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  59              		.align	2
  60              		.global	MemManage_Handler
  61              		.thumb
ARM GAS  /tmp/ccXvJDqa.s 			page 4


  62              		.thumb_func
  64              	MemManage_Handler:
  65              	.LFB125:
 115:Src/stm32f4xx_it.c **** }
 116:Src/stm32f4xx_it.c **** 
 117:Src/stm32f4xx_it.c **** /**
 118:Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 119:Src/stm32f4xx_it.c ****   */
 120:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 121:Src/stm32f4xx_it.c **** {
  66              		.loc 1 121 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.L5:
 122:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 123:Src/stm32f4xx_it.c **** 
 124:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 125:Src/stm32f4xx_it.c ****   while (1)
 126:Src/stm32f4xx_it.c ****   {
 127:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 128:Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 129:Src/stm32f4xx_it.c ****   }
  73              		.loc 1 129 0 discriminator 1
  74 0000 FEE7     		b	.L5
  75              		.cfi_endproc
  76              	.LFE125:
  78 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	2
  80              		.global	BusFault_Handler
  81              		.thumb
  82              		.thumb_func
  84              	BusFault_Handler:
  85              	.LFB126:
 130:Src/stm32f4xx_it.c **** }
 131:Src/stm32f4xx_it.c **** 
 132:Src/stm32f4xx_it.c **** /**
 133:Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 134:Src/stm32f4xx_it.c ****   */
 135:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 136:Src/stm32f4xx_it.c **** {
  86              		.loc 1 136 0
  87              		.cfi_startproc
  88              		@ Volatile: function does not return.
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.L7:
 137:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 138:Src/stm32f4xx_it.c **** 
 139:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 140:Src/stm32f4xx_it.c ****   while (1)
 141:Src/stm32f4xx_it.c ****   {
 142:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 143:Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
ARM GAS  /tmp/ccXvJDqa.s 			page 5


 144:Src/stm32f4xx_it.c ****   }
  93              		.loc 1 144 0 discriminator 1
  94 0000 FEE7     		b	.L7
  95              		.cfi_endproc
  96              	.LFE126:
  98 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  99              		.align	2
 100              		.global	UsageFault_Handler
 101              		.thumb
 102              		.thumb_func
 104              	UsageFault_Handler:
 105              	.LFB127:
 145:Src/stm32f4xx_it.c **** }
 146:Src/stm32f4xx_it.c **** 
 147:Src/stm32f4xx_it.c **** /**
 148:Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 149:Src/stm32f4xx_it.c ****   */
 150:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 151:Src/stm32f4xx_it.c **** {
 106              		.loc 1 151 0
 107              		.cfi_startproc
 108              		@ Volatile: function does not return.
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              	.L9:
 152:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 153:Src/stm32f4xx_it.c **** 
 154:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 155:Src/stm32f4xx_it.c ****   while (1)
 156:Src/stm32f4xx_it.c ****   {
 157:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 158:Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 159:Src/stm32f4xx_it.c ****   }
 113              		.loc 1 159 0 discriminator 1
 114 0000 FEE7     		b	.L9
 115              		.cfi_endproc
 116              	.LFE127:
 118 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 119              		.align	2
 120              		.global	SVC_Handler
 121              		.thumb
 122              		.thumb_func
 124              	SVC_Handler:
 125              	.LFB128:
 160:Src/stm32f4xx_it.c **** }
 161:Src/stm32f4xx_it.c **** 
 162:Src/stm32f4xx_it.c **** /**
 163:Src/stm32f4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 164:Src/stm32f4xx_it.c ****   */
 165:Src/stm32f4xx_it.c **** void SVC_Handler(void)
 166:Src/stm32f4xx_it.c **** {
 126              		.loc 1 166 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
ARM GAS  /tmp/ccXvJDqa.s 			page 6


 131 0000 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE128:
 135 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 136              		.align	2
 137              		.global	DebugMon_Handler
 138              		.thumb
 139              		.thumb_func
 141              	DebugMon_Handler:
 142              	.LFB129:
 167:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 168:Src/stm32f4xx_it.c **** 
 169:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 170:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 171:Src/stm32f4xx_it.c **** 
 172:Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 173:Src/stm32f4xx_it.c **** }
 174:Src/stm32f4xx_it.c **** 
 175:Src/stm32f4xx_it.c **** /**
 176:Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 177:Src/stm32f4xx_it.c ****   */
 178:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 179:Src/stm32f4xx_it.c **** {
 143              		.loc 1 179 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148 0000 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE129:
 152 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 153              		.align	2
 154              		.global	PendSV_Handler
 155              		.thumb
 156              		.thumb_func
 158              	PendSV_Handler:
 159              	.LFB130:
 180:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 181:Src/stm32f4xx_it.c **** 
 182:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 183:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 184:Src/stm32f4xx_it.c **** 
 185:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 186:Src/stm32f4xx_it.c **** }
 187:Src/stm32f4xx_it.c **** 
 188:Src/stm32f4xx_it.c **** /**
 189:Src/stm32f4xx_it.c ****   * @brief This function handles Pendable request for system service.
 190:Src/stm32f4xx_it.c ****   */
 191:Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 192:Src/stm32f4xx_it.c **** {
 160              		.loc 1 192 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165 0000 7047     		bx	lr
ARM GAS  /tmp/ccXvJDqa.s 			page 7


 166              		.cfi_endproc
 167              	.LFE130:
 169 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 170              		.align	2
 171              		.global	SysTick_Handler
 172              		.thumb
 173              		.thumb_func
 175              	SysTick_Handler:
 176              	.LFB131:
 193:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 194:Src/stm32f4xx_it.c **** 
 195:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 196:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 197:Src/stm32f4xx_it.c **** 
 198:Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 199:Src/stm32f4xx_it.c **** }
 200:Src/stm32f4xx_it.c **** 
 201:Src/stm32f4xx_it.c **** /**
 202:Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 203:Src/stm32f4xx_it.c ****   */
 204:Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 205:Src/stm32f4xx_it.c **** {
 177              		.loc 1 205 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		.loc 1 205 0
 182 0000 08B5     		push	{r3, lr}
 183              	.LCFI0:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 3, -8
 186              		.cfi_offset 14, -4
 206:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 207:Src/stm32f4xx_it.c **** 
 208:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 209:Src/stm32f4xx_it.c ****   HAL_IncTick();
 187              		.loc 1 209 0
 188 0002 FFF7FEFF 		bl	HAL_IncTick
 189              	.LVL0:
 190 0006 08BD     		pop	{r3, pc}
 191              		.cfi_endproc
 192              	.LFE131:
 194              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 195              		.align	2
 196              		.global	CAN1_RX0_IRQHandler
 197              		.thumb
 198              		.thumb_func
 200              	CAN1_RX0_IRQHandler:
 201              	.LFB132:
 210:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 211:Src/stm32f4xx_it.c **** 
 212:Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 213:Src/stm32f4xx_it.c **** }
 214:Src/stm32f4xx_it.c **** 
 215:Src/stm32f4xx_it.c **** /******************************************************************************/
 216:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 217:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
ARM GAS  /tmp/ccXvJDqa.s 			page 8


 218:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 219:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 220:Src/stm32f4xx_it.c **** /******************************************************************************/
 221:Src/stm32f4xx_it.c **** 
 222:Src/stm32f4xx_it.c **** /**
 223:Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupts.
 224:Src/stm32f4xx_it.c ****   */
 225:Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 226:Src/stm32f4xx_it.c **** {
 202              		.loc 1 226 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206 0000 38B5     		push	{r3, r4, r5, lr}
 207              	.LCFI1:
 208              		.cfi_def_cfa_offset 16
 209              		.cfi_offset 3, -16
 210              		.cfi_offset 4, -12
 211              		.cfi_offset 5, -8
 212              		.cfi_offset 14, -4
 227:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 228:Src/stm32f4xx_it.c **** 
 229:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 230:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 213              		.loc 1 230 0
 214 0002 154D     		ldr	r5, .L25
 215 0004 2846     		mov	r0, r5
 216 0006 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 217              	.LVL1:
 231:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 232:Src/stm32f4xx_it.c ****   HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 218              		.loc 1 232 0
 219 000a 144C     		ldr	r4, .L25+4
 220 000c 2846     		mov	r0, r5
 221 000e 0021     		movs	r1, #0
 222 0010 134A     		ldr	r2, .L25+8
 223 0012 2346     		mov	r3, r4
 224 0014 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 225              	.LVL2:
 233:Src/stm32f4xx_it.c **** 
 234:Src/stm32f4xx_it.c ****   switch(r){
 226              		.loc 1 234 0
 227 0018 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 228 001a 052B     		cmp	r3, #5
 229 001c 1BD8     		bhi	.L15
 230 001e DFE803F0 		tbb	[pc, r3]
 231              	.L18:
 232 0022 03       		.byte	(.L17-.L18)/2
 233 0023 07       		.byte	(.L19-.L18)/2
 234 0024 0B       		.byte	(.L20-.L18)/2
 235 0025 0F       		.byte	(.L21-.L18)/2
 236 0026 13       		.byte	(.L22-.L18)/2
 237 0027 17       		.byte	(.L23-.L18)/2
 238              		.p2align 1
 239              	.L17:
 235:Src/stm32f4xx_it.c ****     case 0x00:
 236:Src/stm32f4xx_it.c ****       rts=0xFF;
ARM GAS  /tmp/ccXvJDqa.s 			page 9


 240              		.loc 1 236 0
 241 0028 FF22     		movs	r2, #255
 242 002a 0E4B     		ldr	r3, .L25+12
 243 002c 1A70     		strb	r2, [r3]
 237:Src/stm32f4xx_it.c ****       break;
 244              		.loc 1 237 0
 245 002e 38BD     		pop	{r3, r4, r5, pc}
 246              	.L19:
 238:Src/stm32f4xx_it.c ****     case 0x01:
 239:Src/stm32f4xx_it.c ****       rts=0x00;
 247              		.loc 1 239 0
 248 0030 0022     		movs	r2, #0
 249 0032 0C4B     		ldr	r3, .L25+12
 250 0034 1A70     		strb	r2, [r3]
 240:Src/stm32f4xx_it.c ****       break;
 251              		.loc 1 240 0
 252 0036 38BD     		pop	{r3, r4, r5, pc}
 253              	.L20:
 241:Src/stm32f4xx_it.c ****     case 0x02:
 242:Src/stm32f4xx_it.c ****       lts=0xFF;
 254              		.loc 1 242 0
 255 0038 FF22     		movs	r2, #255
 256 003a 0B4B     		ldr	r3, .L25+16
 257 003c 1A70     		strb	r2, [r3]
 243:Src/stm32f4xx_it.c ****       break;
 258              		.loc 1 243 0
 259 003e 38BD     		pop	{r3, r4, r5, pc}
 260              	.L21:
 244:Src/stm32f4xx_it.c ****     case 0x03:
 245:Src/stm32f4xx_it.c ****       lts=0x00;
 261              		.loc 1 245 0
 262 0040 0022     		movs	r2, #0
 263 0042 094B     		ldr	r3, .L25+16
 264 0044 1A70     		strb	r2, [r3]
 246:Src/stm32f4xx_it.c ****       break;
 265              		.loc 1 246 0
 266 0046 38BD     		pop	{r3, r4, r5, pc}
 267              	.L22:
 247:Src/stm32f4xx_it.c ****     case 0x04:
 248:Src/stm32f4xx_it.c ****       horn=0xFF;
 268              		.loc 1 248 0
 269 0048 FF22     		movs	r2, #255
 270 004a 084B     		ldr	r3, .L25+20
 271 004c 1A70     		strb	r2, [r3]
 249:Src/stm32f4xx_it.c ****       break;
 272              		.loc 1 249 0
 273 004e 38BD     		pop	{r3, r4, r5, pc}
 274              	.L23:
 250:Src/stm32f4xx_it.c ****     case 0x05:
 251:Src/stm32f4xx_it.c ****       horn=0x00;
 275              		.loc 1 251 0
 276 0050 0022     		movs	r2, #0
 277 0052 064B     		ldr	r3, .L25+20
 278 0054 1A70     		strb	r2, [r3]
 279              	.L15:
 280 0056 38BD     		pop	{r3, r4, r5, pc}
 281              	.L26:
ARM GAS  /tmp/ccXvJDqa.s 			page 10


 282              		.align	2
 283              	.L25:
 284 0058 00000000 		.word	hcan1
 285 005c 00000000 		.word	r
 286 0060 00000000 		.word	pRxHeader
 287 0064 00000000 		.word	rts
 288 0068 00000000 		.word	lts
 289 006c 00000000 		.word	horn
 290              		.cfi_endproc
 291              	.LFE132:
 293              		.text
 294              	.Letext0:
 295              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 296              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 297              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 298              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 299              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 300              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 301              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 302              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccXvJDqa.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccXvJDqa.s:21     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccXvJDqa.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccXvJDqa.s:59     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:64     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccXvJDqa.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:84     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccXvJDqa.s:99     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:104    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccXvJDqa.s:119    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:124    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccXvJDqa.s:136    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:141    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccXvJDqa.s:153    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:158    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccXvJDqa.s:170    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccXvJDqa.s:175    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccXvJDqa.s:195    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccXvJDqa.s:200    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccXvJDqa.s:232    .text.CAN1_RX0_IRQHandler:0000000000000022 $d
     /tmp/ccXvJDqa.s:238    .text.CAN1_RX0_IRQHandler:0000000000000028 $t
     /tmp/ccXvJDqa.s:284    .text.CAN1_RX0_IRQHandler:0000000000000058 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_CAN_IRQHandler
HAL_CAN_GetRxMessage
hcan1
r
pRxHeader
rts
lts
horn
